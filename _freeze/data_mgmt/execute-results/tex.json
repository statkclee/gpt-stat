{
  "hash": "5d2bbbdfbfc8bc5ce868e29ccf91ee1d",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n\n# 데이터 관리 방법론\n\n## 측정 변수의 구분\n\n자료가 갖는 고유한 특성을 숫자료 표현한 측정 척도에 따라, 명목형, 순서형, 구간형, 비율형 네가지로 구분된다.\n측정 척도에 따라 유의미한 통계량도 함께 정해진다. [@wiener1921new]  [@lee2020godeung; @stevens1946theory]\n\n\n\n-   명목척도(Nominal): 단순히 개체 특성 분류를 위해 숫자나 부호를 부여한 척도\n    -   남자: M, 여자: F 혹은 월: 1, 화: 2, ... 일:7, 혈액형: A형, B형, AB형, O형\n-   순서척도(Ordinal): 명목척도에 부가적으로 \"순서(서열)\" 정보가 추가된 척도\n    -   군대계급: 사병, 장교, 장군 등\n-   구간척도(Interval): 순서척도에 부가적으로 \"등간격\" 정보가 추가된 척도\n    -   구간척도는 절대 영점이 없음. 측정된 값들 간의 상대적인 차이만을 의미.\n    -   섭씨 온도 척도에서 0도는 온도 부재를 의미하지 않음.\n    -   덧셈과 뺄셈은 가능하지만, 곱셈과 나눗셈은 의미가 없음. 온도가 서울 10도, 제주 20도는 제주가 서울보다 온도가 2배 높다고 할 수 없음.\n    -   온도(섭씨 20도, 화씨 68도), 시력, IQ 지수(90, 100, 110), 물가지수(기준 연도 대비 105, 110, 115) 등\n-   비율척도(Ratio): 구간척도에 \"비율\" 비교특성이 추가된 척도로 \"비율 등간격\" 특성이 포함됨.\n    -   절대 영점은 해당 측정의 부재를 의미. 길이가 0cm는 길이가 없음을 의미. 무게 0kg는 무게가 없음을 의미.\n    -   절대 '0'을 가지고 사칙연산이 가능함. 10kg은 5kg의 2배.\n    -   연령(20세, 30세, 40세), 월소득(2백만원, 3백만원, 4백만원\\`), TV 시청률 등.\n\n![측정 분류](images/stevens_measurement.png)\n\n변동계수(Coefficient of Variation, CV)는 표준편차와 평균값의 비율로 계산되는 통계값으로 다음과 같이 정의된다.\n다음에서, $\\sigma$는 표준편차이고, \\$\\mu\\$ 평균이다.\n\n$$CV = \\frac{\\sigma}{\\mu} \\times 100\\%$$\n\nCV는 데이터의 변동성을 상대적으로 표현할 때 주로 사용된다.\n특히, 두 개 이상의 변수 변동성을 비교할 때 편리하고, 변수 단위가 다르거나 평균값이 크게 다를 경우에도 CV를 사용하면 변동성을 공정하게 비교할 수 있는 장점이 있다.\n\n비율척도는 0이 절대적인 의미를 갖고, 모든 사칙연산이 가능한 척도 특징을 갖고 있다.\nCV가 0%이면, 변동성이 전혀 없다는 것을 의미하고, CV에서 0%는 절대적인 부재를 의미하며, 이것은 비율척도의 특징 중 하나다.\n따라서, CV는 비율로 표현되므로, 어떤 변수의 CV가 다른 변수 CV의 2배라면, 변동성이 2배 크다는 것을 의미한다.\n\n## R 자료구조 {#data-type-basics}\n\nR에서 기본으로 사용하는 벡터 자료형은 **원자 벡터(Atomic Vector)** 와 **리스트(List)** 로 나눠진다.\n원자 벡터에는 6가지 자료형이 있고, logical, integer, double, character, complex, raw, 총 6 개가 있으며 주로, 논리형, 정수형, 부동소수점형, 범주형, 4가지를 많이 사용한다. [@wickham2023r]\n\n| 자료형(Type) | 모드(Mode) | 저장모드(Storage Mode) |\n|--------------|------------|------------------------|\n| logical      | logical    | logical                |\n| **integer**  | numeric    | integer                |\n| **double**   | numeric    | double                 |\n| complex      | complex    | complex                |\n| character    | character  | character              |\n| raw          | raw        | raw                    |\n\n## 측정척도와 자료형\n\n측정 척도는 크게 명목척도(Nominal), 순서척도(Ordinal), 구간척도(Interval), 그리고 비율척도(Ratio)로 분류할 수 있다.\n\n- **명목척도(Nominal)**는 순서정보가 없는 범주로, `logical`, `character`나 `factor` 자료형으로 표현한다.\n- **순서척도(Ordinal)**는 순서 정보가 추가된 명목척도로 `ordered factor`로 표현한다.\n- **구간척도(Interval)**에서는 덧셈과 뺄셈은 가능하지만, 곱셈과 나눗셈은 의미가 없고 절대 영점도 없다. 주로 `double` 또는 `integer` 자료형으로 표현한다.\n- **비율척도(Ratio)**에서는 모든 사칙연산이 가능하며, 절대 '0'을 포함된다. 주로 `double` 또는 `integer` 자료형으로 표현한다.\n\n\n|     측정 척도      |                            설명                            |       R 자료형        |\n|:-------------:|:-----------------------------------------:|:-------------:|\n| 명목척도(Nominal)  |                숫자나 문자로 개체 특성 분류                | `character`, `factor` |\n| 순서척도(Ordinal)  |                순서 정보가 추가된 명목척도                 |   `ordered factor`    |\n| 구간척도(Interval) | 덧셈, 뺄셈 가능 but 곱셈, 나눗셈 의미 없음. 절대 영점 없음 |  `double`, `integer`  |\n|  비율척도(Ratio)   |             모든 사칙연산 가능. 절대 '0' 포함              |  `double`, `integer`  |\n\n## 자료형 확장 {#extended-data-type}\n\n범주(요인), 텍스트, 날짜와 시간도 중요한 R에서 자주 사용되는 중요한 데이터 자료형으로 별도로 다뤄진다.\n이를 위해서 `stringr`, `lubridate`, `forcats` 팩키지를 사용해서 데이터 정제작업은 물론 기계학습 예측모형 개발에 활용한다.\n\n\n\n| R 자료형    | 자료형 | 예제                   |\n|-------------|--------|------------------------|\n| `logical`   | 부울   | 부도여부(Y/N), 남여    |\n| `integer`   | 정수   | 코로나19 감염자수      |\n| `factor`    | 범주   | 정당, 색상             |\n| `numeric`   | 실수   | 키, 몸무게, 주가, 환율 |\n| `character` | 텍스트 | 주소, 이름, 책제목     |\n| `Date`      | 날짜   | 생일, 투표일           |\n\n![자료형 확장](images/data_vectors.jpg)\n\n## 벡터와 리스트\n\n리스트는 재귀 벡터(recursive vector)라고도 불리는데 리스트는 다른 리스트를 포함할 수 있기 때문이다.\n\n따라서, 원자벡터는 동질적(homogeneous)이고, 리스트는 상대적으로 이질적(heterogeneous)이다.\n\n모든 벡터는 두가지 성질(Property)을 갖는데, 자료형과 길이로 이를 확인하는데 `typeof()`와 `length()` 함수를 사용해서 확인한다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\na <- list(a = 1:3,\n\t        b = \"a string\",\n\t        c = pi,\n\t        d = list(-1, -5) )\n  \ncat(\"자료형:\", typeof(a), \" 길이: \", length(a) ) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n자료형: list  길이:  4\n```\n:::\n:::\n\n\n\n\n## `NULL`과 `NA` 결측값 {#is-na-null}\n\n결측되었다는 없다는 것을 표시하는 방법이 두가지 필요하다.\n하나는 벡터가 없다는 `NULL`이고, 벡터 내부에 값이 결측되었다는 `NA` 다.\n`dataframe$variable <- NULL` 명령문을 사용하면 데이터프레임(`dataframe`)에 변수(`variable`)를 날려보내는 효과가 있다. 예를 들어 책장이 아예 없다는 의미(`NULL`)와 책장에 책이 없다(`NA`)는 다른 개념을 지칭하고 쓰임새가 다르다.\n\n::: row\n::: col-md-6\n**`NULL`**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NULL 자료형과 길이\ntypeof(NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NULL\"\n```\n:::\n\n```{.r .cell-code}\nlength(NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n:::\n\n::: col-md-6\n**`NA`**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NA 자료형과 길이\ntypeof(NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nlength(NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n:::\n:::\n\n`NA`의 중요한 특징은 전염된다는 것이다.\n즉, `NA`에 연산을 가하면 연산결과는 무조건 `NA`가 된다.\n`NA`가 7보다 큰지, 7을 더하고 빼고, 부울 연산을 하든 `NA`와 연산결과는 무조건 `NA`가 된다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNA + 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nNA / 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nNA > 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n7 == NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nNA == NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\n\n\n# 데이터프레임\n\n\n**R** 은 6가지 기본 벡터로 자료를 저장하지만, 이외에 행렬(matrix), 데이터프레임(data.frame), 리스트(list) 자료구조가 있다.\n하지만, 자료분석을 위해서 데이터를 데이터셋의 형태로 구성을 해야한다. \n데이터셋이 중요한 이유는 자료를 분석하기 위해서 다양한 형태의 개별 자료를 통합적으로 분석하기 위해서다. \n이를 위해서 리스트 자료구조로 일단 모으게 된다. \n예를 들어 개인 신용분석을 위해서는 개인의 소득, 부채, 성별, 학력 등등의 숫자형, 문자형, 요인(Factor)형 등의 자료를 데이터셋에 담아야 한다. \n특히 변수와-관측값 (Variable-Observation) 형식의 자료를 분석하기 위해서는 데이터프레임(`data.frame`)을 사용한다. \n데이터프레임은 모든 변수에 대해서 관측값이 같은 길이를 갖도록 만들어 놓은 것이다. \n\n![통계 자료구조](images/data_structure.jpg)\n\n데이터프레임은 `data.frame` 함수를 사용해서 생성한다. \nR 객체 구조 파악을 위해서는 간단한 자료의 경우 데이터 형식을 확인할 수 있는 1--2줄 정도의 간단한 스크립트와 명령어를 통해서 확인이 가능하지만, \n복잡한 데이터의 구조를 파악하기 위해서는 `summary` 함수와 `str` 함수를 통해서 확인해야 한다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 벡터를 정의한다.\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \"Terrestrial planet\", \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)\nrings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\n\n# 벡터를 합쳐서 데이터프레임을 생성\nplanets_df <-data.frame(name, type, diameter, rotation, rings)\n```\n:::\n\n\n\n## 범주형, 순서형 자료형 {#data-type-factor}\n\n범주형, 순서형 자료형을 생성하는 경우 주의를 기울여야 한다. `factor` 함수를 사용해서 요인형 자료형을 생성하는데,\n내부적으로 저장공간을 효율적으로 사용하고 속도를 빠르게 하는데 유용한다.\n순서를 갖는 범주형의 경우 `factor` 함수 내부에 `levels` 인자를 넣어 정의하면 순서 정보가 유지된다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 범주형\nanimals_vector <- c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector <- factor(animals_vector)\nfactor_animals_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Elephant Giraffe  Donkey   Horse   \nLevels: Donkey Elephant Giraffe Horse\n```\n:::\n\n```{.r .cell-code}\n# 순위형\ntemperature_vector <- c(\"High\", \"Low\", \"High\",\"Low\", \"Medium\")\nfactor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c(\"Low\", \"Medium\", \"High\"))\nfactor_temperature_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] High   Low    High   Low    Medium\nLevels: Low < Medium < High\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"M\", \"F\" 수준\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"F\" \"M\"\n```\n:::\n\n```{.r .cell-code}\n# \"Female\", \"Male\" 로 변환\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\nlevels(factor_survey_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Female\" \"Male\"  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 문자형 벡터와 요인 벡터\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\n\n# 문자형 벡터 요약\nsummary(survey_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Length     Class      Mode \n        5 character character \n```\n:::\n\n```{.r .cell-code}\n# 요인 벡터 요약\nsummary(factor_survey_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nF M \n2 3 \n```\n:::\n:::\n",
    "supporting": [
      "data_mgmt_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}