{
  "hash": "6ac3fb707b8c668f30f2e0277c7e0b34",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n# 예측모형 가치 {#predictive-model}\n\n예측모형을 잘 활용하여 사업적 효과를 내는 것은 AUC 값이 높은 성능 좋은 예측모형을 개발하는 것과 다른 문제가 된다. 예측모형개발이 수월해지고 사업에 활용이 많이 지면서 예측모형을 사업쪽에 설명하고 사업쪽의 의견을 반영하는 방법에 대한 연구와 활용이 빈번해지고 있다. 이를 위해서 먼저 예측모형을 의사결정나무 모형과 일반화 선형모형으로 예측모형을 개발하여 포르투갈 은행에서 개발된 상품에 가입을 하는지 예측하는 은행 마케팅 캠페인 데이터다. [^bank-marketing] [^modelplotr]\n\n[^modelplotr]: [Jurriaan Nagelkerke and Pieter Marcus (2018-09-20), \"Introducing modelplotr: Plots to evaluate the business value of predictive models\"](http://api.rpubs.com/jurrr/411810)\n\n[^bank-marketing]: [Bank Marketing Data Set, The data is related with direct marketing campaigns (phone calls) of a Portuguese banking institution. The classification goal is to predict if the client will subscribe a term deposit (variable y)](https://archive.ics.uci.edu/ml/datasets/bank+marketing#)\n\n## 데이터 준비 {#predictive-model-x}\n\n먼저 UCI 웹사이트에서 데이터를 다운로드 받아 압축을 풀고, 예측모형에 사용될 수 있도록 데이터를 가공한다.\n약 11.3% 고객이 은행상품에 가입한 것이 파악된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 0. 환경설정 -----\nlibrary(tidyverse)\nlibrary(caret)\nlibrary(modelplotr) # devtools::install_github(\"modelplot/modelplotr\")\n\n# 1. 데이터 다운로드 -----\ndownload.file(url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip\", destfile = \"data//bank-additional.zip\", mode='wb')\n\n# 1.1. 압축풀기 -----\nunzip(\"data/bank-additional.zip\", exdir=\"./data\")\n\n# 1.2. 불러오기 -----\nbank_dat <- read_delim(\"data/bank-additional/bank-additional-full.csv\", delim=\";\",\n                      col_types = cols(\n                              .default = col_character(),\n                              age = col_integer(),\n                              duration = col_integer(),\n                              campaign = col_integer(),\n                              pdays = col_integer(),\n                              previous = col_integer(),\n                              emp.var.rate = col_double(),\n                              cons.price.idx = col_double(),\n                              cons.conf.idx = col_double(),\n                              euribor3m = col_double(),\n                              nr.employed = col_double()))\n\n\nbank_df <- bank_dat %>% \n    select_('y','duration','campaign','pdays','previous','euribor3m')\n\n\nbank_df <- bank_df %>% \n    mutate(y = factor(y, levels=c('no', 'yes')))\n\nbank_df %>% \n    count(y) %>% \n    mutate(pcnt = scales::percent(n /sum(n)))\n```\n:::\n\n\n## 예측모형 {#predictive-model-caret}\n\n`caret` 팩키지를 통해서 예측모형을 개발한다. \n`createDataPartition()` 함수로 훈련/시험 데이터를 나누고,\nCV 방법을 통해서 최적의 모형을 개발하도록 `doSNOW` 팩키지로 멀티코어를 활용한 \n병렬처리를 가능하도록 해서 RPART, GLM, RF 모형에 따른 최적 모형을 개발한다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2. 예측모형 -----\n## 2.1. 훈련/시험 데이터 분할 ------\nlibrary(caret)\n\nbank_index <- createDataPartition(bank_df$y, times =1, p=0.3, list=FALSE)\n\ntrain_df <- bank_df[bank_index, ]\ntest_df  <- bank_df[-bank_index, ]\n\n## 2.2. 모형 개발/검증 데이터셋 준비 ------\n\ncv_folds <- createMultiFolds(train_df$y, k = 10, times = 3)\n\ncv_cntrl <- trainControl(method = \"repeatedcv\", number = 10,\n                         repeats = 3, index = cv_folds)\n\n\n## 2.2. 모형 개발/검증 데이터셋 준비 ------\n\nlibrary(doSNOW)\n# 실행시간\nstart.time <- Sys.time()\n\ncl <- makeCluster(4, type = \"SOCK\")\nregisterDoSNOW(cl)\n\nbank_rpart <- train(y ~ ., data = train_df, \n                    method = \"rpart\", \n                    trControl = cv_cntrl, \n                    tuneLength = 7)\n\nbank_glm   <- train(y ~ ., data = train_df, \n                    method = \"glm\",\n                    family = \"binomial\",\n                    trControl = cv_cntrl, \n                    tuneLength = 7)\n\nbank_rf    <- train(y ~ ., data = train_df, \n                   method = \"rf\",\n                   trControl = cv_cntrl, \n                   tuneLength = 7,\n                   importance = TRUE)\n\nstopCluster(cl)\n\ntotal.time <- Sys.time() - start.time\ntotal.time\n\n# bank_rpart_m <- bank_rpart$finalModel\n# bank_glm_m <- bank_glm$finalModel\n```\n:::\n\n\n\n# 예측모형 사업활용 [^predictive-model-business] [^german-credit-pm] [^gain-and-lift] {#predictive-model-caret-business}\n\n[^predictive-model-business]: [Cumulative Gain Chart](http://mlwiki.org/index.php/Cumulative_Gain_Chart)\n\n[^german-credit-pm]: [DnI institute, \"Model Validation using R- German Credit Data\"](http://dni-institute.in/blogs/model-validation-using-r-german-credit-data/)\n\n[^gain-and-lift]: [LISTEN DATA, \"UNDERSTAND GAIN AND LIFT CHARTS\"](https://www.listendata.com/2014/08/excel-template-gain-and-lift-charts.html)\n\n예측모형을 사업에 활용하기 위해서 AUC, 민감도, 특이도와 같은 예측모형 성능파악 지표 대신에 다음과 같은 그래프와 측도를 많이 사용한다.\n\n1. **누적 이득 그래프(Cumulative gains plot)**: 예측모형을 적용해서 십분위 X까지 선택하게 되면, 실제 목표 라벨을 실제 몇 %까지 기대할 수 있는지에 대한 답을 제공한다.\n1. **누적 향상도 그래프(Cumulative Lift Chart)**: 예측모형을 적용해서 십분위수 X까지 누적 선택하게 되면, 예측모형을 전혀 사용하지 않을 때 대비하여 몇배나 더 효과가 있는지에 대한 대답을 제공한다.\n1. **반응 그래프(Response Plot)**: 예측모형을 적합시켜서 십분위수 X를 선택하게 되면, 해당 십분위수에서 기대되는 예상 반응율을 몇 %가 되는지에 대한 답을 제공한다.\n1. **누적 반응 그래프(Cumulative Response Plot)**: 예측모형을 적합시켜서 해당 십분위수 X까지 누적하여 선택하게 되면, 해당 십분위수에서 기대되는 예상 반응율을 몇 %가 되는지에 대한 답을 제공한다.\n\n## 이득과 향상도 데이터 {#predictive-model-caret-business-dataset}\n\n이득(gain), 향상도(lift) 계산을 위해서 먼저 예측모형에서 데이터를 준비한다.\n필요한 데이터는 예측값(확률/스코어 점수)과 라벨이 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbank_rpart_pred <- predict(bank_rpart, newdata=test_df, type=\"prob\")[,2] %>% tbl_df\nbank_glm_pred   <- predict(bank_glm, newdata=test_df, type=\"prob\")[,2] %>% tbl_df\nbank_rf_pred    <- predict(bank_rf, newdata=test_df, type=\"prob\")[,2] %>% tbl_df\n\nbank_pred_df <- data.frame(bank_glm_pred, bank_rpart_pred, bank_rf_pred, test_df$y) %>% tbl_df %>% \n    rename(prob_glm =value,\n           prob_rpart = `value.1`, \n           prob_rf = `value.2`, \n           y = `test_df.y`)\n\nbank_pred_df %>% \n    sample_n(100) %>% \n    DT::datatable()\n```\n:::\n\n\n## 이득과 향상도 계산 {#predictive-model-caret-business-dataset-compute}\n\n예측모형에서 이득과 향상도 계산을 위한 데이터가 준비되었다면 다음 단계로 이득(gain), 향상도(lift)를 계산하여 \n데이터프레임으로 준비한다. \n\n### `caret` 팩키지 - `lift()` 함수 {#predictive-model-caret-business-dataset-compute-caret}\n\n`caret` 팩키지 `lift()` 함수를 통해 이득과 향상도를 계산할 수 있으나 총 표본 대비 비율로 나눠져서 사용시 주의가 요망된다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlift_df <- caret::lift(y ~ prob_glm + prob_rf + prob_rpart, data=bank_pred_df, cuts=11, class=\"yes\")\n\nlift_df$data %>% \n    filter(liftModelVar == 'prob_rf')  %>% \n    DT::datatable()\n\n# ggplot(lift_df, value=10)\n```\n:::\n\n\n### `gains` 팩키지 - `gains()` 함수 {#predictive-model-caret-business-dataset-compute-gains}\n\n`gains` 팩키지 `gains()` 함수를 통해 이득과 향상도를 계산할 수 있으나, 그 다음 후속 작업을 위해서 \n데이터프레임 변환작업을 수행하면 되는데 기본적으로 향상도와 이득에 대한 중요정보를 십분위수에 맞춰 모두 계산되어 있어 이를 참조값으로 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gains)\n\ngains_tbl <- gains(actual    = as.integer(bank_pred_df$y)-1,\n                   predicted = bank_pred_df$prob_glm, \n                   groups=10)\n\ngains_df <- tibble(\n    x = gains_tbl$depth,\n    obs = gains_tbl$obs,\n    cume.obs = gains_tbl$cume.obs,\n    mean.resp = gains_tbl$mean.resp, \n    cume.mean.resp = gains_tbl$cume.mean.resp,\n    cume.pct.of.total = gains_tbl$cume.pct.of.total,\n    lift = gains_tbl$lift, \n    cume.lift = gains_tbl$cume.lift,\n    mean.prediction = gains_tbl$mean.prediction,\n    min.prediction = gains_tbl$mean.prediction, \n    max.prediction = gains_tbl$max.prediction, \n    conf = gains_tbl$conf, \n    optimal = gains_tbl$optimal, \n    num.groups = gains_tbl$num.groups,\n    percents = gains_tbl$percents\n) %>% \n    add_row(x=0, obs=0, cume.obs=0, mean.resp=0, cume.mean.resp=0, cume.pct.of.total=0, lift=0,\n            cume.lift=0, mean.prediction=0, min.prediction=0, max.prediction=0, conf=\"none\",\n            optimal = \"false\",num.groups=10, percents=\"false\") %>% \n    arrange(x)\n\nDT::datatable(gains_df)\n\n# gains_df %>% \n#     ggplot(aes(x=x, y=cume.pct.of.total)) +\n#       geom_line() +\n#       geom_point() +\n#       scale_y_continuous(limits=c(0,1)) +\n#       geom_abline(slope=1, intercept = 0)\n```\n:::\n\n\n### 사용자 정의 함수 {#predictive-model-caret-business-dataset-compute-custom}\n\n[LISTEN DATA, \"UNDERSTAND GAIN AND LIFT CHARTS\"](https://www.listendata.com/2014/08/excel-template-gain-and-lift-charts.html)를 참조해서 직접 사용자 정의 함수를 작성해도 가능하다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_lift <- function(label_var, prob_var, groups=10) {\n    \n    tmp_df <- data.frame(cbind(label_var, prob_var))\n    \n    tmp_df <- tmp_df %>%\n        mutate(decile = ntile(desc(prob_var), groups))\n\n    gain_table <- tmp_df %>% \n        group_by(decile) %>%\n        summarise_at(vars(label_var), funs(total = n(),\n                                           total_resp = sum(., na.rm = TRUE))) %>%\n        mutate(cum_resp = cumsum(total_resp),\n               gain     = cum_resp / sum(total_resp) * 100,\n               cum_lift = gain / (decile*(100/groups)))\n    return(gain_table)\n}\n\ncustom_lift_df <- custom_lift(as.integer(bank_pred_df$y)-1, bank_pred_df$prob_glm, 10)\n\nDT::datatable(custom_lift_df)\n```\n:::\n\n\n\n## 누적 이득 그래프 {#predictive-model-caret-business-cumulative-gains}\n\n**누적 이득 그래프(Cumulative gains plot)**는 예측모형을 적용해서 십분위 X 까지 선택하게 되면, 실제 목표 라벨을 실제 몇 % 까지 예측/기대할 수 있는지에 대한 답을 제공한다.\n\nRF가 최종 예측모형으로 선정되었다면 이를 활용하여 \"누적 이득 그래프\"로 시각화해보고 예측모형의 사업성과를 추정해보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(extrafont)\nloadfonts()\n\n(gains_glm_tbl <- gains(actual    = as.integer(bank_pred_df$y)-1,\n                       predicted = bank_pred_df$prob_glm, \n                       groups=10))\n\ngains_glm_df <- tibble(\n    x = gains_glm_tbl$depth,\n    obs = gains_glm_tbl$obs,\n    cume.obs = gains_glm_tbl$cume.obs,\n    mean.resp = gains_glm_tbl$mean.resp, \n    cume.mean.resp = gains_glm_tbl$cume.mean.resp,\n    cume.pct.of.total = gains_glm_tbl$cume.pct.of.total,\n    lift = gains_glm_tbl$lift, \n    cume.lift = gains_glm_tbl$cume.lift,\n    mean.prediction = gains_glm_tbl$mean.prediction,\n    min.prediction = gains_glm_tbl$mean.prediction, \n    max.prediction = gains_glm_tbl$max.prediction, \n    conf = gains_glm_tbl$conf, \n    optimal = gains_glm_tbl$optimal, \n    num.groups = gains_glm_tbl$num.groups,\n    percents = gains_glm_tbl$percents\n) %>% \n    add_row(x=0, obs=0, cume.obs=0, mean.resp=0, cume.mean.resp=0, cume.pct.of.total=0, lift=0,\n            cume.lift=0, mean.prediction=0, min.prediction=0, max.prediction=0, conf=\"none\",\n            optimal = \"false\",num.groups=10, percents=\"false\") %>% \n    arrange(x) %>% \n    mutate(decile = x / 10 %>% as.integer)\n\n\n\ngains_glm_df %>% \n    ggplot(aes(x=decile, y=cume.pct.of.total)) +\n      geom_point(size=2) +\n      geom_line(size=1.3) +\n      geom_abline(slope=0.1, intercept = 0) +\n      scale_x_continuous(limits=c(0,10), breaks = seq(0,10,1)) +\n      scale_y_continuous(labels = scales::percent) +\n      theme_minimal() +\n      labs(x=\"십분위\", y=\"누적 이득(Cumulative Gains)\", title=\"포르투칼 마케팅 캠페인 누적 이득 그래프\") \n```\n:::\n\n\n\n![포르투칼 마케팅 캠페인 누적 이득 그래프](images/model_value_gain.png)\n\n## 향상 리프트(Lift) 그래프 {#predictive-model-caret-business-lift}\n\n**누적 향상(리프트) 그래프(Cumulative lift plot)**는 예측모형을 적용해서 십분위수 X까지 선택하게 되면, 예측모형을 전혀 사용하지 않을 때 대비하여 몇배나 더 효과가 있는지에 대한 대답을 제공한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngains_glm_df %>% \n    filter(x !=0) %>% \n    ggplot(aes(x=decile, y=cume.lift/100)) +\n      geom_point(size=2) +\n      geom_line(size=1.3) +\n      geom_hline(yintercept=1, size=1.3, color=\"darkgray\") +\n      scale_x_continuous(limits=c(1,10), breaks = seq(0,10,1)) +\n      scale_y_continuous(limits=c(0.5,6), breaks = seq(0,6,1)) +\n      theme_minimal(base_family = \"NanumGothic\") +\n      labs(x=\"십분위\", y=\"누적 향상도(Cumulative Lift)\", title=\"포르투칼 마케팅 캠페인 누적 향상도 그래프\") \n```\n:::\n\n\n![포르투칼 마케팅 캠페인 누적 향상도 그래프](images/model_value_lift.png)\n\n## 반응 그래프(Reponse Plot) {#predictive-model-caret-business-response-plot}\n\n**반응 그래프(Response Plot)**는 예측모형을 적합시켜서 십분위수 X를 선택하게 되면, 해당 십분위수에서 기대되는 예상 반응율을 몇 %가 되는지에 대한 답을 제공한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_response_pcnt <- gains_glm_df$cume.mean.resp[11]\n\ngains_glm_df %>% \n    filter(x !=0) %>% \n    ggplot(aes(x=decile, y=mean.resp)) +\n      geom_point(size=2) +\n      geom_line(size=1.3) +\n      geom_hline(yintercept=avg_response_pcnt, size=1.3, color=\"darkgray\") +\n      scale_x_continuous(limits=c(1,10), breaks = seq(0,10,1)) +\n      scale_y_continuous(limits=c(0,0.6), breaks = seq(0,0.6,0.1), labels = scales::percent) +\n      theme_minimal(base_family = \"NanumGothic\") +\n      labs(x=\"십분위\", y=\"평균 반응율(%)\", title=\"포르투칼 마케팅 캠페인 반응율 그래프\") \n```\n:::\n\n\n\n![포르투칼 마케팅 캠페인 반응율 그래프](images/model_value_response.png)\n\n## 누적 반응 그래프(Cumulative Reponse Plot) {#predictive-model-caret-business-cumulative-response-plot}\n\n**누적 반응 그래프(Cumulative Response Plot)**는 예측모형을 적합시켜서 해당 십분위수 X까지 누적하여 선택하게 되면, 해당 십분위수에서 기대되는 예상 반응율을 몇 %가 되는지에 대한 답을 제공한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngains_glm_df %>% \n    filter(x !=0) %>% \n    ggplot(aes(x=decile, y=cume.mean.resp)) +\n      geom_point(size=2) +\n      geom_line(size=1.3) +\n      geom_hline(yintercept=avg_response_pcnt, size=1.3, color=\"darkgray\") +\n      scale_x_continuous(limits=c(1,10), breaks = seq(0,10,1)) +\n      scale_y_continuous(limits=c(0,0.6), breaks = seq(0,0.6,0.1), labels = scales::percent) +\n      theme_minimal(base_family = \"NanumGothic\") +\n      labs(x=\"십분위\", y=\"누적 평균 반응율(%)\", title=\"포르투칼 마케팅 캠페인 누적 반응율 그래프\") \n```\n:::\n\n\n\n![포르투칼 마케팅 캠페인 누적 반응율 그래프](images/model_value_cumulative.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}