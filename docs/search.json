[
  {
    "objectID": "cs_german_tank.html#문제-정의",
    "href": "cs_german_tank.html#문제-정의",
    "title": "9  독일 탱크 문제",
    "section": "9.1 문제 정의",
    "text": "9.1 문제 정의\n\n\n\n\nflowchart TB\n\n1934 --&gt;|\"Pz.Kpfw. I (Panzer I)\"| 1936\n1936 --&gt;|\"Pz.Kpfw. II (Panzer II)\"| 1937\n1937 --&gt;|\"Pz.Kpfw. III (Panzer III)\"| 1938\n1938 --&gt;|\"Pz.Kpfw. IV (Panzer IV)\"| 1942\n1942 --&gt;|\"Pz.Kpfw. V Panther\"| 1943\n1942 --&gt;|\"Pz.Kpfw. VI Tiger I\"| 1943\n1943 --&gt;|\"Pz.Kpfw. VI Tiger II (King Tiger)\"| 1944\n1944 --&gt;|\"Jagdpanzer 38(t) Hetzer\"| 1945\n1945 --&gt;|\"Maus\" | END\n\n\n\n\n\n\n\n\n위키백과 실린 독일 탱크공장"
  },
  {
    "objectID": "cs_german_tank.html#데이터-수집",
    "href": "cs_german_tank.html#데이터-수집",
    "title": "\n9  독일 탱크 문제\n",
    "section": "\n9.2 데이터 수집",
    "text": "9.2 데이터 수집\n제2차 세계대전 중 독일 탱크의 시리얼 번호 획득은 연합국의 미묘한 정보 수집 작업 중 하나였다. 전투 중 파괴되거나 포획된 독일 탱크들은 대부분 고유의 시리얼 번호가 달려있었으며, 시리얼 번호는 탱크 생산 순서와 일련번호를 나타냈기 때문에, 연합국은 이러한 번호를 꼼꼼히 수집했다. 파손된 탱크 부품에서도 이러한 번호를 발견할 수 있었고, 이를 통해 전체 탱크 생산 규모의 일부를 엿볼 수 있었다. 이런 정보들은 전쟁 중 독일의 탱크 생산 능력을 추정하는 데 매우 중요한 열쇠로 작용했다."
  },
  {
    "objectID": "cs_german_tank.html#중요성",
    "href": "cs_german_tank.html#중요성",
    "title": "\n9  독일 탱크 문제\n",
    "section": "\n9.1 중요성",
    "text": "9.1 중요성\n제2차 세계대전에서 독일 탱크 생산대수의 정확한 추정은 연합국의 전략적, 전술적 결정 및 심리적 전쟁을 주도하는 데 결정적인 역할을 했다.\n독일의 탱크 생산능력은 그들의 군사 능력과 전쟁 지속 능력을 나타내는 중요한 지표였다. 이를 통해 연합국은 한정된 자원을 어떻게 효율적으로 사용할지 결정할 수 있었다. 만약 독일이 대규모의 탱크를 적극적으로 생산 중이라는 정보를 획득하면, 연합국은 빠르게 자신들의 탱크 생산을 증대시키거나 대탱크 무기의 개발에 투자하는 등의 전략적 대응을 준비했다.\n탱크 생산대수와 탱크종류는 독일군이 다음에 취할 전략과 전술을 예측하는 데 귀중한 정보를 제공했다. 이러한 정보는 전장에서의 우위를 확보하고 적의 움직임을 선제적으로 차단하는 데 도움을 줬고, 심리적 측면에서도 탱크의 생산 정보는 중요했다. 독일의 실제 탱크 생산 능력을 과소 평가하거나 과대 평가하는 것은 연합국의 사기와 전략에 큰 영향을 미쳤다.\n전쟁이 종료된 이후에도, 독일의 탱크 및 기타 군사 장비의 생산 정보는 평화 협정의 조건을 결정하는 데 중요한 자료로 활용되었으며, 독일의 잠재적 군사 능력을 평가하고 장래의 안전 보장을 위한 조치를 결정하는 데 필수적인 정보자산이 되었다."
  },
  {
    "objectID": "cs_german_tank.html#월별-탱크생산대수",
    "href": "cs_german_tank.html#월별-탱크생산대수",
    "title": "\n9  독일 탱크 문제\n",
    "section": "\n9.3 월별 탱크생산대수",
    "text": "9.3 월별 탱크생산대수\n제2차 세계대전 기간 독일 탱크의 생산 대수를 분석한 표에 따르면, 다양한 추정치와 실제 생산된 탱크의 수를 비교할 수 있다. 1940년 6월에는 통계적 방법을 통해 169대의 탱크가 생산되었다고 추정되었으나, 정보기관은 1,000대로 추정했다. 그러나 실제로는 122대만 생산되었다. 이어서 1941년 6월에는 통계적으로는 244대, 정보기관에서는 1,550대로 추정되었고, 실제로는 271대가 생산되었다. 마지막으로 1942년 8월에는 통계적 추정치가 327대, 정보기관의 추정치가 1,550대로 나왔으며, 실제 생산된 탱크는 342대였다. 이를 통해 보면, 통계적 방법으로 추정한 생산 대수가 정보기관의 추정보다 실제 생산량에 더 가까웠음을 알 수 있다.\n\n\n년월\n통계 추정\n정보기관 추정\n독일 생산대수\n\n\n\n1940년 6월\n169\n1,000\n122\n\n\n1941년 6월\n244\n1,550\n271\n\n\n1942년 8월\n327\n1,550\n342"
  },
  {
    "objectID": "cs_german_tank.html#통계-추정방법",
    "href": "cs_german_tank.html#통계-추정방법",
    "title": "\n9  독일 탱크 문제\n",
    "section": "\n9.4 통계 추정방법",
    "text": "9.4 통계 추정방법\nMLE를 사용하여 독일 탱크의 총 생산 수를 추정하는 방법은 관측된 탱크의 일련 번호 간의 평균 간격을 기준으로 한다.\n예를 들어, 탱크 \\(k\\) 대를 관측했을 때, 가장 큰 일련 번호가 \\(m\\)이면, 평균적으로 탱크 사이의 간격은 \\(\\frac{m}{k}\\)이다. 이 간격을 기반으로, 번호 \\(m\\) 이후에 아직 관측되지 않은 탱크는 대략 \\(\\frac{m}{k}\\) 대가 더 있을 것으로 예상된다.\n이 정보를 토대로, 전체 탱크 수에 대한 추정치 \\(N\\)는 다음의 공식으로 구할 수 있다:\n\\[\nN_{\\text{추정치}} = m + \\frac{m}{k} - 1\n\\]\n독일군에서 5대의 탱크를 포획하였다고 상상해보자. 포획한 탱크의 일련 번호는 2, 5, 7, 20, 그리고 31이다. 여기서, 최대 일련 번호 \\(m\\)은 31이고, 포획된 탱크의 총 수 \\(k\\)는 5대이다.\n이 정보를 사용하여 탱크의 총 생산 수 \\(N\\)을 추정하면:\n\\[\nN_{\\text{추정치}} = m + \\frac{m}{k} - 1 = 31 + \\frac{31}{5} - 1\n\\]\n따라서, \\(N_{\\text{추정}}\\)의 값은 36.2로, 총 탱크 수는 대략 36 또는 37대로 추정될 수 있다."
  },
  {
    "objectID": "u_boats.html#유보트-데이터",
    "href": "u_boats.html#유보트-데이터",
    "title": "\n8  유보드\n",
    "section": "\n8.1 유보트 데이터",
    "text": "8.1 유보트 데이터\n총 1,153대 유보트가 활동했으며 전쟁이 끝난 후에 유보트 운명을 표로 정리하면 다음과 같다.\n\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n\nuboat_raw &lt;- read_csv(\"data/uboat-data.csv\")\n\nfate_type_eng &lt;- c(\"Sunk\", \"Scuttled\", \"Surrendered\", \"Decommissioned\", \"Missing\", \n\"Given\", \"Damaged\", \"Captured\", \"Grounded\", \"Destroyed\")\n\nfate_type_kor &lt;- c(\"침몰\", \"자침\", \"항복\", \"해체\", \"실종\", \"기증\", \"손상\", \"포획\", \"좌초\", \"파괴\")\n\nfate_translation &lt;- tibble(fate_type = fate_type_eng,\n                           fate_type_kor = fate_type_kor)\n\nuboat_raw |&gt; \n  count(fate_type, sort = TRUE, name = \"대수\") |&gt; \n  mutate(fate_kor = c(\"침몰\", \"자침\", \"항복\", \"해체\", \"실종\", \"기증\", \"손상\", \"포획\", \"좌초\", \"파괴\")) |&gt; \n  mutate(비율 = 대수 / sum(대수)) |&gt;  \n  relocate(fate_kor, .after = fate_type) |&gt; \n  gt() |&gt; \n    gt_theme_hangul() |&gt;   \n    cols_label(\n        fate_type = md(\"**fate type**\"),\n        fate_kor = md(\"**유보트 운명**\"),\n    ) |&gt; \n    grand_summary_rows(\n      columns = 대수,\n      fns =  list(label = \"합계\", id='totals', fn = \"sum\"),\n      fmt = ~ fmt_integer(.),\n      side = \"bottom\"\n    ) |&gt; \n    grand_summary_rows(\n      columns = 비율,\n      fns =  list(label = \"합계\", fn = \"sum\"),\n      fmt = ~ fmt_percent(., decimals = 0),\n      side = \"bottom\"\n    ) |&gt; \n    fmt_percent(columns = 비율, decimals = 1) |&gt; \n    cols_align(\"center\") |&gt; \n    tab_header(\n      title = \"유보트 유형별 운명\",\n      subtitle = \"자료출처: uboat.net\"\n    )\n\n\n\n\n\n\n유보트 유형별 운명\n    \n\n자료출처: uboat.net\n    \n\n\n      fate type\n      유보트 운명\n      대수\n      비율\n    \n\n\n\n\nSunk\n침몰\n640\n55.5%\n\n\n\nScuttled\n자침\n218\n18.9%\n\n\n\nSurrendered\n항복\n154\n13.4%\n\n\n\nDecommissioned\n해체\n55\n4.8%\n\n\n\nMissing\n실종\n46\n4.0%\n\n\n\nGiven\n기증\n16\n1.4%\n\n\n\nDamaged\n손상\n12\n1.0%\n\n\n\nCaptured\n포획\n5\n0.4%\n\n\n\nGrounded\n좌초\n4\n0.3%\n\n\n\nDestroyed\n파괴\n3\n0.3%\n\n\n합계\n—\n—\n1,153\n100%\n\n\n\n\n\n\n\n8.1.1 유보트 성과\n유보트가 침몰시킨 선박수(ships_sunk) 정보가 담겨있어 이를 바탕으로 활동성과를 분석해보자.\n\nuboat_tbl &lt;- uboat_raw |&gt; \n  # filter( fate_type == \"Sunk\") |&gt; \n  mutate(fate_date = lubridate::mdy(fate)) \n\nuboat_tbl |&gt; \n  group_by(fate_type) |&gt; \n  summarise(침몰선박수 = sum(ships_sunk),\n            유보트수 = n()) |&gt; \n  mutate(비율 = 침몰선박수 / sum(침몰선박수)) |&gt; \n  arrange(desc(침몰선박수)) |&gt; \n  left_join(fate_translation) |&gt; \n  relocate(fate_type_kor, .after = fate_type) |&gt; \n  relocate(유보트수, .after = fate_type_kor) |&gt; \n  gt::gt() |&gt; \n  gt_theme_hangul() |&gt; \n  cols_align(\"center\") |&gt; \n  gt::tab_header(\n    title = \"유보트 운명유형별 침몰선박수\", \n    subtitle = \"자료출처: uboat.net\"\n  ) |&gt; \n    cols_label(\n        fate_type = md(\"**fate type**\"),\n        fate_type_kor = md(\"**유보트 운명**\"),\n    ) |&gt; \n    grand_summary_rows(\n      columns = 침몰선박수,\n      fns =  list(label = \"합계\", id='totals', fn = \"sum\"),\n      fmt = ~ fmt_integer(.),\n      side = \"bottom\"\n    ) |&gt; \n    grand_summary_rows(\n      columns = 비율,\n      fns =  list(label = \"합계\", fn = \"sum\"),\n      fmt = ~ fmt_percent(., decimals = 0),\n      side = \"bottom\"\n    ) |&gt; \n    fmt_percent(columns = 비율, decimals = 1) |&gt; \n    fmt_integer(침몰선박수) |&gt; \n    tab_spanner(label = \"침몰선박\", columns = c(침몰선박수, 비율))\n\n\n\n\n\n\n유보트 운명유형별 침몰선박수\n    \n\n자료출처: uboat.net\n    \n\n\n      fate type\n      유보트 운명\n      유보트수\n      \n        침몰선박\n      \n    \n\n침몰선박수\n      비율\n    \n\n\n\n\nSunk\n침몰\n640\n1,809\n65.8%\n\n\n\nDecommissioned\n해체\n55\n373\n13.6%\n\n\n\nScuttled\n자침\n218\n265\n9.6%\n\n\n\nSurrendered\n항복\n154\n131\n4.8%\n\n\n\nMissing\n실종\n46\n101\n3.7%\n\n\n\nGiven\n기증\n16\n41\n1.5%\n\n\n\nDamaged\n손상\n12\n16\n0.6%\n\n\n\nCaptured\n포획\n5\n12\n0.4%\n\n\n\nDestroyed\n파괴\n3\n2\n0.1%\n\n\n\nGrounded\n좌초\n4\n1\n0.0%\n\n\n합계\n—\n—\n—\n2,751\n100%\n\n\n\n\n\n\n\n# extrafont::font_import(pattern = \"NanumSquare\", prompt = FALSE)\n\nextrafont::loadfonts() \n\nuboat_tbl |&gt; \n  mutate(fate_yearmon = floor_date(fate_date, \"month\")) |&gt; \n  group_by(fate_yearmon) |&gt; \n  summarise(침몰선박수 = sum(ships_sunk)) |&gt; \n  arrange(desc(침몰선박수)) |&gt; \n  ggplot(aes(x = fate_yearmon, y = 침몰선박수)) +\n    geom_line() +\n    theme_korean() +\n    labs(x =\"\",\n         title = \"월별 유보트 침몰선박수\")\n\n\n\n\n\n\n\n\nlibrary(giscoR)\nlibrary(sf)\n\nworld &lt;- gisco_get_countries()\n\nsunk_sf &lt;- uboat_tbl |&gt; \n  filter(fate_type  == \"Sunk\")  |&gt; \n  mutate(sunk_year = year(fate_date)) |&gt; \n  select(name, fat_lon, fate_lat, sunk_year) |&gt; \n  mutate(across(fat_lon:fate_lat, as.numeric)) |&gt; \n  mutate(sunk_year = as.factor(sunk_year)) |&gt; \n  drop_na() |&gt; \n  st_as_sf(coords = c(\"fat_lon\", \"fate_lat\"), crs = sf::st_crs(world))\n\nsunk_sf |&gt; \n  mutate(sunk_year = case_when(sunk_year %in% c(1939, 1940) ~ \"1939-40\",\n                   TRUE ~ sunk_year)) |&gt; \n  ggplot() +\n    geom_sf(size = 0.5, aes(color = sunk_year)) +\n    geom_sf(data = world) +\n    facet_wrap( ~ sunk_year ) +\n    theme_korean() +\n    theme(legend.position = \"none\") +\n    labs(title = \"연도별 침몰 유보트 좌표\")"
  },
  {
    "objectID": "u_boats.html#목표선박-데이터",
    "href": "u_boats.html#목표선박-데이터",
    "title": "\n8  유보드\n",
    "section": "\n8.2 목표선박 데이터",
    "text": "8.2 목표선박 데이터\nGitHub 저장소에 침몰선박에 대한 정보도 확인해보자.\n\ndownload.file(url = \"https://raw.githubusercontent.com/kadenhendron/uboat-data/master/data/uboat-target-data.csv\", \n              destfile = \"data/uboat-target-data.csv\", model = \"w\")\n\n국적별 총 침몰선박수를 표로 작성한다.\n\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(countrycode)\n\ntarget_raw &lt;- read_csv(\"data/uboat-target-data.csv\")\n\ntarget_tbl &lt;- target_raw |&gt; \n  mutate(attack_date = lubridate::mdy(attack_date)) |&gt; \n  mutate(yearmon = floor_date(attack_date, \"month\")) \n\nships_nationality &lt;- target_tbl |&gt; \n  mutate(nationality = fct_lump(nationality, n = 9, other_level = \"기타국가\")) |&gt; \n  group_by(nationality) |&gt; \n  summarise(선박수 = n()) |&gt; \n  arrange(desc(선박수))\n\ntop10_iso &lt;- tribble(~\"nationality\", ~\"iso3c\", ~\"country_name\", ~\"country_name_kr\",\n\"British\", \"GBR\",  \"United Kingdom\", \"영국\",\n\"American\", \"USA\",  \"United States\", \"미국\",\n\"기타국가\", \"\", \"ETC\", \"기타\",\n\"Norwegian\", \"NOR\",  \"Norway\", \"노르웨이\",\n\"Dutch\", \"NLD\",  \"Denmark\", \"덴마크\", # 주의: Dutch는 네덜란드 사람을 나타내며, Denmark는 덴마크를 의미합니다.\n\"Greek\", \"GRC\",  \"Greece\", \"그리스\",\n\"Soviet\", \"SUN\", \"Russia\", \"러시아\", # 주의: Soviet는 소비에트 연방을 나타냅니다. 현대의 러시아와는 다름니다.\n\"Swedish\", \"SWE\",  \"Sweden\", \"스웨덴\",\n\"Panamanian\", \"PAN\",  \"Panama\", \"파나마\",\n\"Canadian\", \"CAN\",  \"Canada\", \"캐나다\")\n\ntarget_tbl |&gt; \n  mutate(nationality = fct_lump(nationality, n = 9, other_level = \"기타국가\")) |&gt; \n  group_by(nationality, yearmon) |&gt; \n  summarise(선박수 = n()) |&gt; \n  group_by(nationality) |&gt; \n  summarise(ships_data = list(선박수)) |&gt;  \n  left_join(ships_nationality) |&gt; \n  arrange(desc(선박수)) |&gt; \n  left_join(top10_iso) |&gt; \n  mutate(iso_2 = countrycode(country_name, origin = \"country.name\", \"iso2c\")) |&gt; \n  relocate(iso_2, .before = nationality) |&gt; \n  select(iso_2, 국가명 = country_name_kr, 선박수, ships_data) |&gt; \n  mutate(비율 = 선박수 / sum(선박수)) |&gt; \n  relocate(비율, .after = 선박수) |&gt; \n  gt() |&gt; \n    gtExtras::gt_plt_sparkline(ships_data) |&gt; \n    fmt_flag(columns = iso_2) |&gt; \n    cols_label(\n      iso_2 = \"\",\n      선박수 = \"총 침몰선박수\",\n      ships_data = \"월별 선박침몰\"\n    )  |&gt; \n    gt_theme_hangul() |&gt; \n    gt::tab_header(\n      title = \"국가별 피해 침몰선박수\", \n      subtitle = \"자료출처: uboat.net\"\n    ) |&gt; \n      grand_summary_rows(\n        columns = 선박수,\n        fns =  list(label = \"합계\", id='totals', fn = \"sum\"),\n        fmt = ~ fmt_integer(.),\n        side = \"bottom\"\n      ) |&gt; \n      grand_summary_rows(\n        columns = 비율,\n        fns =  list(label = \"합계\", fn = \"sum\"),\n        fmt = ~ fmt_percent(., decimals = 0),\n        side = \"bottom\"\n      ) |&gt; \n      fmt_percent(columns = 비율, decimals = 1) |&gt; \n      fmt_integer(columns = 선박수) |&gt; \n      cols_align(\"center\") |&gt; \n      gt::fmt_missing(missing_text = \"-\")\n\n\n\n\n\n\n국가별 피해 침몰선박수\n    \n\n자료출처: uboat.net\n    \n\n\n      \n      국가명\n      총 침몰선박수\n      비율\n      월별 선박침몰\n    \n\n\n\n\nUnited Kingdom\n\n영국\n1,655\n47.9%\n\n2.0\n\n\n\n\nUnited States\n\n미국\n549\n15.9%\n\n1.0\n\n\n\n\n-\n기타\n342\n9.9%\n\n1.0\n\n\n\n\nNorway\n\n노르웨이\n311\n9.0%\n\n2.0\n\n\n\n\nDenmark\n\n덴마크\n137\n4.0%\n\n1.0\n\n\n\n\nGreece\n\n그리스\n122\n3.5%\n\n1.0\n\n\n\n\nRussian Federation\n\n러시아\n106\n3.1%\n\n1.0\n\n\n\n\nSweden\n\n스웨덴\n89\n2.6%\n\n1.0\n\n\n\n\nPanama\n\n파나마\n81\n2.3%\n\n1.0\n\n\n\n\nCanada\n\n캐나다\n66\n1.9%\n\n1.0\n\n\n\n합계\n—\n—\n3,458\n100%\n—"
  },
  {
    "objectID": "u_boats.html#유보트-사령관",
    "href": "u_boats.html#유보트-사령관",
    "title": "\n8  유보드\n",
    "section": "\n8.3 유보트 사령관",
    "text": "8.3 유보트 사령관\nRiding tables with {gt} and {gtExtras}\n\ncommander_uboat &lt;- target_tbl |&gt; \n  count(commander, name) |&gt; \n  group_by(commander) |&gt; \n  summarise(잠수함 = str_c(name, collapse = \",\")) |&gt; \n  mutate(잠수함 = str_split(잠수함, pattern = \",\")) |&gt; \n  unnest(잠수함) |&gt; \n  group_by(commander) |&gt; \n  summarise(잠수함 = str_c(잠수함, collapse = \", \"))\n\ntarget_tbl |&gt; \n  group_by(commander) |&gt; \n  summarise(선박수 = n(),\n            사망자수 = sum(dead, na.rm = TRUE),\n            톤수 = sum(tonnage, na.rm = TRUE)) |&gt; \n  arrange(desc(선박수)) |&gt; \n  mutate(선박수_그래프 = 선박수) |&gt; \n  left_join(commander_uboat) |&gt; \n  slice_max(order_by = 선박수, n = 10) |&gt; \n  # 시각화 \n  gt::gt() |&gt; \n    cols_label(\n      commander = \"유보트 선장\",\n      선박수 = \"선박수\",\n      잠수함 = \"탑승 잠수함\",\n      선박수_그래프 = \"그래프\"\n    )  |&gt; \n    gt_theme_hangul() |&gt; \n    gt::tab_header(\n      title = \"상위 10 유보트 선장\", \n      subtitle = \"자료출처: uboat.net\"\n    ) |&gt; \n    gtExtras::gt_merge_stack(col1 = commander, col2 = 잠수함) |&gt; \n    cols_width(\n      commander ~ px(130),\n      선박수_그래프 ~ px(100)\n    ) |&gt; \n    fmt_integer(columns = is.numeric) |&gt; \n    gt_plt_bar_pct(column = 선박수_그래프, scaled = FALSE, fill = \"blue\", background = \"lightblue\") |&gt; \n    gt::tab_spanner(label = \"총 침몰선박\", columns = c(선박수, 선박수_그래프)) |&gt; \n    cols_align(\"center\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n상위 10 유보트 선장\n    \n\n자료출처: uboat.net\n    \n\n유보트 선장\n      \n        총 침몰선박\n      \n      사망자수\n      톤수\n    \n\n선박수\n      그래프\n    \n\n\n\n\nOtto Kretschmer\nU-23, U-99\n\n56\n\n846\n355,371\n\n\n\nWolfgang Lth\nU-138, U-181, U-43, U-9\n\n49\n\n1,097\n243,099\n\n\n\nJoachim Schepke\nU-100, U-19, U-3\n\n40\n\n468\n169,690\n\n\n\nErich Topp\nU-552, U-57\n\n39\n\n848\n217,286\n\n\n\nHeinrich Liebe\nU-38\n\n35\n\n418\n200,090\n\n\n\nViktor Schtze\nU-103, U-25\n\n35\n\n780\n180,073\n\n\n\nGeorg Lassen\nU-160\n\n33\n\n343\n205,843\n\n\n\nGnther Prien\nU-47\n\n33\n\n1,945\n197,376\n\n\n\nJohann Mohr\nU-124\n\n32\n\n978\n153,031\n\n\n\nErnst Bauer\nU-126\n\n29\n\n196\n142,021"
  },
  {
    "objectID": "u_boats.html#유보트와-선박",
    "href": "u_boats.html#유보트와-선박",
    "title": "\n8  유보드\n",
    "section": "\n8.4 유보트와 선박",
    "text": "8.4 유보트와 선박\n침몰된 선박과 유보트 손실을 월별 시각화를 통해서 1943년을 기점으로 유보트에 대한 연합국의 대응이 효과를 발휘하여 선박손실을 급격히 줄어든 반면 유보트 손실이 급격히 올라간 것을 확인할 수 있다.\n\nuboat_yearmon &lt;- uboat_tbl |&gt; \n  mutate(년월 = floor_date(fate_date, \"month\")) |&gt; \n  group_by(년월) |&gt; \n  summarise(유보트수 = n())\n\ntarget_yearmon &lt;- target_tbl |&gt; \n  mutate(년월 = floor_date(attack_date, \"month\")) |&gt; \n  group_by(년월) |&gt; \n  summarise(침몰수 = n()) \n\nuboat_yearmon |&gt; \n  left_join(target_yearmon) |&gt; \n  pivot_longer(cols = 유보트수:침몰수, names_to = \"구분\", values_to = \"선박수\") |&gt; \n  ggplot(aes(x = 년월, y = 선박수, color = 구분)) +\n    geom_line() +\n    labs(title = \"침몰 유보트와 침몰 선박수 추세\",\n         x = \"\",\n         y = \"침몰선박수\",\n         caption = \"자료출처: uboats.net\") +\n    theme_korean() +\n    scale_color_manual(values = c(\"red\", \"blue\")) +\n    theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\n\n\n1. Hendron K. Germany’s U-Boats & Data Visualization: Can data visualization offer answers to our questions about history? 2016. https://medium.com/@kadenhendron/germany-s-u-boats-data-visualization-6e018c6c174."
  },
  {
    "objectID": "clt.html",
    "href": "clt.html",
    "title": "\n10  중심극한정리 예시\n",
    "section": "",
    "text": "11 중심극한정리\n상자 안에 1에서 999까지 숫자가 표시된 999개의 상태가 균질한 공(\\(X\\))을 넣고 이를 특정한 모집단(population)이라고 가정하자. 이 모집단의 평균 \\(\\mu\\)은 500이다. 모집단의 분산 \\(\\mathrm{var}(X)\\)는 80,475이다.\n이 중 30개의 공을 50회에 걸쳐 반복 추출한다. 이 경우 표본평균의 분포는 \\(E(\\bar{X}_i)=\\mu(X)\\)이고 분산이 \\(\\mathrm{var}(\\bar{X_i})=\\frac{\\sigma^2}{n}\\)인 정규분포에 근사한다. 즉, \\(X \\sim \\mathcal{N}(500,~283.7^2)\\)이다."
  },
  {
    "objectID": "clt.html#이를-실험을-통해-살펴보자.",
    "href": "clt.html#이를-실험을-통해-살펴보자.",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n12.1 이를 실험을 통해 살펴보자.",
    "text": "12.1 이를 실험을 통해 살펴보자.\n999개의 공이 든 상자에서 30개의 공을 50회에 걸쳐 무작위 반복추출하고(30개의 공을 뽑은 뒤, 다시 그 공을 상자 안에 집어 놓고 상자를 처음과 같은 상태가 되도록 뒤흔들어서 다시 30개의 공을 뽑는 것을 50회 반복한다), 그 각각의 평균을 기록하면 다음과 같다.\n\n\n50회 반복추출의 평균값: 361.8, 587.8, 496.9, 535.6, 523.3, 634.7, 459.8, 488.7, 447.6, 560.4, 513.1, 440.7, 449.2, 431.0, 475.1, 458.3, 552.7, 465.0, 489.6, 484.3, 485.1, 527.1, 552.3, 549.4, 468.7, 500.8, 552.3, 464.9, 514.8, 445.4, 474.9, 488.3, 545.7, 591.5, 416.3, 521.8, 516.3, 498.5, 490.0, 615.1, 582.4, 458.4, 452.2, 513.4, 499.9, 467.7, 438.3, 521.1, 550.5, 622.5\n\n\n표본평균값의 분포를 히스토그램으로 표현하면 그림 12.1와 같다.\n\n\n\n\n그림 12.1: 표본평균의 히스토그램"
  },
  {
    "objectID": "clt.html#그림에서-보듯",
    "href": "clt.html#그림에서-보듯",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n12.2 그림에서 보듯",
    "text": "12.2 그림에서 보듯\n\\(\\bar{X_i}\\)는 500을 중심으로 좌우대칭적으로 분포하고 있다. 이들의 평균은 503.6으로 모평균 500과 근사하다. 이들 중 이론적으로 산출한 평균으로부터 약 2 표준편차만큼 떨어진 구간(\\(\\mu \\pm 2\\frac{\\sigma}{\\sqrt{n}}\\)) 안에 속하는 값, 즉 \\([396.4, 603.6]\\)의 범위 안에 있는 값의 개수를 세면 모두 46개이다.\n표본평균 분포의 약 95%를 포괄하고 있음을 알 수 있다."
  },
  {
    "objectID": "clt.html#r-markdown",
    "href": "clt.html#r-markdown",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n12.3 R Markdown",
    "text": "12.3 R Markdown\nRender 버튼을 누르면 문서가 생성된다. 여기에는 내용과 함께 내장된 R 코드 청크가 실행된다. R 코드는 다음과 같이 포함할 수 있다.\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "clt.html#플로트-포함하기",
    "href": "clt.html#플로트-포함하기",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n12.4 플로트 포함하기",
    "text": "12.4 플로트 포함하기\n플로트도 포함할 수 있으니, 다음과 같다.\n\n\n\n\n그림 12.2: Pressure\n\n\n\necho = FALSE 파라미터를 주었기 때문에 이 플로트를 생성하는 R 코드가 인쇄되지 않는다. 그림 12.2을 보자."
  },
  {
    "objectID": "clt.html#재미있는-배열-문제",
    "href": "clt.html#재미있는-배열-문제",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n12.5 재미있는 배열 문제",
    "text": "12.5 재미있는 배열 문제\n\nN, C = 13,3\na=[ f\"{i+1}\" for i in range(N) ]\nfor i in range(1, C):\n    if len(a)%C == i: a.insert((len(a)//C+1)*(i+1)-1, \" \")\nprint(\"\\\\begin{tabular}{%s}\"%(\"l\"*C))\n\n\\begin{tabular}{lll}\n\nfor i in range(len(a)//C): print(\" & \".join(a[i::len(a)//C]), \" \\\\\\\\\")\n\n1 & 6 & 10  \\\\\n2 & 7 & 11  \\\\\n3 & 8 & 12  \\\\\n4 & 9 & 13  \\\\\n5 &   &    \\\\\n\nprint(\"\\\\end{tabular}\")\n\n\\end{tabular}\n\n\n이 문제는 흥미롭다. KTUG 게시판에 올라온 문제에 대하여 aud라는 분이 단 답변이다. 한편 로도 같은 일을 할 수 있음이 답글 중에 제시되어 있다."
  },
  {
    "objectID": "clt.html#개관",
    "href": "clt.html#개관",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n13.1 개관",
    "text": "13.1 개관\nQuarto의 특징 중의 하나는  문서의 소스를 그대로 집어넣어도 된다는 것이다. 이 장의 텍스트는 다른 곳에서 작성한  소스를 복사한 것이다."
  },
  {
    "objectID": "clt.html#표-그리기",
    "href": "clt.html#표-그리기",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n13.2 표 그리기",
    "text": "13.2 표 그리기\n다른 곳에서 책을 하나 조판하던 때에, tabular의 괘선에 색을 입혀달라는 요구가 있었다. 2020년경이었는데, 당시로서 이것을 구현하는 것은 거의 불가능해 보였으나 어찌어찌 tabular 자체 코드를 해킹해서 어렵사리 성공했더랬다. 그리고 잠시 지났더니 가 나왔다. 조금 더 일찍 나왔다면 그 고생을 하지 않았을 것 아닌가!\n이 패키지를 사용하면 그동안 골칫거리였던 tabular 관련 문제가 대부분 해결된다. 사용법이 조금 복잡해보일지 모르지만 익숙해지면 편하게 쓸 수 있다."
  },
  {
    "objectID": "clt.html#footnotes-in-boxed-environment",
    "href": "clt.html#footnotes-in-boxed-environment",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n13.3 footnotes in boxed environment",
    "text": "13.3 footnotes in boxed environment\n의 apparatus 중에 minipage footnote라는 것이 있다. 예를 들면 다음과 같은 것이다.\n이것은 매우 유용한 장치이기는 하나, 단행본을 출간하는 입장에서 가끔 모든 각주를 페이지 하단에 넣으라는 요구를 받을 때가 있다. 가장 간단한 해결책은 명령을 와 로 분해하는 것이다."
  },
  {
    "objectID": "clt.html#문헌목록",
    "href": "clt.html#문헌목록",
    "title": "\n10  중심극한정리 예시\n",
    "section": "\n13.4 문헌목록",
    "text": "13.4 문헌목록\n참고 문헌 인용과 목록 생성 실험을 합니다. 한국어 문헌과 구미어 문헌은 그 목록형성과 인용 방법이 다릅니다. 한국어 문헌의 예를 들면, [1]같고, 영어 문헌은 예를 들면, [2]같습니다. \n\n\n\n\n1. 김의중, 이상익, 정도언, 신민섭, 윤인영. 한국판 기분상태척도(K-POMS)의 표준화와 신뢰도와 타당도 평가. 수면·정신생리. 2003;10:39–51.\n\n\n2. Allport G, Jarratt P. The old and the new in document processing. Electronic Library. 1992;10:41–5."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "1. Hendron K. Germany’s u-boats & data visualization: Can data\nvisualization offer answers to our questions about history? 2016. https://medium.com/@kadenhendron/germany-s-u-boats-data-visualization-6e018c6c174.\n\n\n2. Marwick B, Boettiger C, Mullen L. Packaging data analytical work\nreproducibly using r (and friends). The American Statistician.\n2018;72:80–8.\n\n\n3. Wickham H, Çetinkaya-Rundel M, Grolemund G. R for data science. \"\nO’Reilly Media, Inc.\"; 2023.\n\n\n4. Stevens SS. On the\ntheory of scales of measurement. Science. 1946;103:677–80.\n\n\n5. 이경화. 고등학교 실용통계. 통계청 통계교육원; 2020.\n\n\n6. Wiener N. A new theory of measurement: A study in the logic of\nmathematics. Proceedings of the London Mathematical Society.\n1921;2:181–205.\n\n\n7. Allport G, Jarratt P. The old and the new in document processing.\nElectronic Library. 1992;10:41–5.\n\n\n8. 김의중, 이상익, 정도언, 신민섭, 윤인영. 한국판\n기분상태척도(k-POMS)의 표준화와 신뢰도와 타당도 평가.\n수면·정신생리. 2003;10:39–51."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GPT 통계",
    "section": "",
    "text": "서문"
  },
  {
    "objectID": "cs_napolean.html",
    "href": "cs_napolean.html",
    "title": "\n10  나폴레옹 러시아 침공\n",
    "section": "",
    "text": "10.0.1 나폴레옹\n\n\n\n\n\n10.0.2 미나르 지도\n\n\n\n\n\n10.0.3 실제 침공\n\n\n\n\n\n10.0.4 데이터\n생존병사 수\n\nlibrary(HistData)\nlibrary(reactable)\nlibrary(tidyverse)\n\ndata(Minard.troops) \ndata(Minard.cities)\ndata(Minard.temp)\n\nMinard.troops %&gt;% \n  select(-group) %&gt;% \n  reactable(\n    defaultPageSize = 5, minRows = 5,  filterable = FALSE, showPagination = TRUE,\n    columns = list(\n      long = colDef(name = \"위도\", align = \"center\"),\n      lat = colDef(name = \"경도\", align = \"center\" ),\n      survivors = colDef(name = \"생존병사수\", align = \"center\", format = colFormat(separators = TRUE ) ),\n      direction = colDef(name = \"진격방향\", align = \"center\")\n    )\n  )  \n\n\n\n\n\n후퇴 기온\n\ndata(Minard.temp)\n\nMinard.temp %&gt;% \n  reactable(\n    defaultPageSize = 5, minRows = 5,  filterable = FALSE, showPagination = TRUE,\n    columns = list(\n      long = colDef(name = \"위도\", align = \"center\"),\n      temp = colDef(name = \"기온\", align = \"center\" ),\n      days = colDef(name = \"후퇴날짜\", align = \"center\"),\n      date = colDef(name = \"관측날짜\", align = \"center\")\n    )\n  )  \n\n\n\n\n\n\n10.0.5 시각화\n\nlibrary(HistData)\n\ndata(Minard.troops)\ndata(Minard.cities)\ndata(Minard.temp)\n\n## Not run: \n#' ## Load required packages\nrequire(ggplot2)\nrequire(scales)\nrequire(gridExtra)\n\nlevels(Minard.cities$city) &lt;- c(\"Bobr\", \"Chjat\", \"Dorogobouge\", \"Gloubokoe\", \"Kowno\", \"Malo-Jarosewii\", \n                                \"Minsk\", \"Mohilow\", \"Moiodexno\", \"Mojaisk\", \"모스코바\", \"Orscha\", \n                                \"Polotzk\", \"Smolensk\", \"Smorgoni\", \"Studienska\", \"Tarantino\", \n                                \"Wilna\", \"Witebsk\", \"Wixma\")\n\n#' ## plot path of troops, and another layer for city names\nplot_troops &lt;- ggplot(Minard.troops, aes(long, lat)) +\n    geom_path(aes(size = survivors, colour = direction, group = group),\n               lineend = \"round\", linejoin = \"round\")\nplot_cities &lt;- geom_text(aes(label = city), size = 4, data = Minard.cities)\n \n#' ## Combine these, and add scale information, labels, etc.\n#' Set the x-axis limits for longitude explicitly, to coincide with those for temperature\n\nbreaks &lt;- c(1, 2, 3) * 10^5 \nplot_minard &lt;- plot_troops + plot_cities +\n    scale_size(\"생존병사수\", range = c(1, 10), \n                breaks = breaks, labels = scales::comma(breaks)) +\n  scale_color_manual(\"진격방향\", \n                     values = c(\"grey50\", \"red\"), \n                     labels=c(\"진격\", \"후퇴\")) +\n  coord_cartesian(xlim = c(24, 38)) +\n  labs(x = NULL,\n       y = \"경도\",\n       title = \"나폴레옹 러시아 침공\",\n       subtitle = \"1812년 6월 24일 ~ 1813년 1월 5일\") +\n  theme_korean() +\n  theme(legend.position=c(.8, .2), legend.box=\"horizontal\")\n \nlibrary(ggrepel)\n#' ## plot temperature vs. longitude, with labels for dates\nplot_temp &lt;- Minard.temp %&gt;% \n  mutate(date = case_when(str_detect(date, \"Oct\") ~ str_replace(date, \"Oct\", \"10월\"),\n                          str_detect(date, \"Nov\") ~ str_replace(date, \"Nov\", \"11월\"),\n                          str_detect(date, \"Dec\") ~ str_replace(date, \"Dec\", \"12월\"),\n                           TRUE ~ \"미상\")) %&gt;% \n  mutate(date = glue::glue(\"{date}일\")) %&gt;% \n  mutate(date = ifelse(date == \"미상일\", \"미상\", date)) %&gt;% \n  ggplot(aes(long, temp)) +\n    geom_path(color=\"grey\", size=1.5) +\n    geom_point(size=2) +\n    geom_text_repel(aes(label=glue::glue(\"{date}\")) ) +\n    xlab(\"위도\") + ylab(\"기온\") +\n    coord_cartesian(xlim = c(24, 38)) + \n    theme_bw()\n    \n#' Combine the two plots into one\nminard_g &lt;- grid.arrange(plot_minard, plot_temp, nrow=2, heights=c(3,1))\n\nggsave( glue::glue(\"images/나폴레옹_러시아.png\") , \n        minard_g,\n        device = ragg::agg_png, \n        width = 297, height = 210, units = \"mm\", res = 600)\n\n\n\n\n\nRe-Visions of Minard"
  },
  {
    "objectID": "cs_bomber.html",
    "href": "cs_bomber.html",
    "title": "\n11  폭격비행기\n",
    "section": "",
    "text": "europe_names &lt;- glue::glue(\"Europe_{1939:1945}\")\npacific_names &lt;- glue::glue(\"Pacific_{c(1937, 1939, 1941:1945)}\")\n\nfor(i in 1:length(europe_names)) {\n  # cat(europe_names[i], \"\\n\")\n  # download.file(url = glue::glue(\"http://www.andrewclem.com/War/Maps/{europe_names[i]}.gif\"),\n  #             destfile = glue::glue(\"{here::here()}/fig/world_war/{europe_names[i]}.png\"), mode = \"wb\" )\n  cat(pacific_names[i], \"\\n\")\n  download.file(url = glue::glue(\"http://www.andrewclem.com/War/Maps/{pacific_names[i]}.gif\"),\n              destfile = glue::glue(\"{here::here()}/fig/world_war/{pacific_names[i]}.png\"), mode = \"wb\" )\n}\n\n\nlibrary(tidyverse)\nlibrary(magick)\n\nworld_war_files &lt;- fs::dir_ls(path = \"fig/world_war\", glob = \"*.png\")\n\neurope_files &lt;- world_war_files[str_detect(world_war_files, \"Europe\")]\npacific_files &lt;- world_war_files[!str_detect(world_war_files, \"Europe\")]\n\n## 유럽 전황 \neurope_m &lt;- magick::image_read(pacific_files[1])\n\nfor (i in 2:length(europe_files)) {\n  europe_m &lt;- c(europe_m, magick::image_read(europe_files[i]))\n}\n\neurope_ani &lt;- magick::image_animate(europe_m, fps = 1, loop = 0, dispose = \"previous\")\nmagick::image_write(europe_ani, \"fig/world_war_europe.gif\")\n\n## 태평양 전황 \npacific_m &lt;- magick::image_read(pacific_files[1])\n\nfor (i in 2:length(pacific_files)) {\n  pacific_m &lt;- c(pacific_m, magick::image_read(pacific_files[i]))\n}\n\npacific_ani &lt;- magick::image_animate(pacific_m, fps = 1, loop = 0, dispose = \"previous\")\nmagick::image_write(pacific_ani, \"fig/world_war_pacific.gif\")\n\n\n11.0.1 세계대전 - 유럽\n\n\n\n\n\n11.0.2 세계대전 - 태평양\n\n\n\n\n\n11.0.3 대공포\n\n\n11.0.4 폭격기 데이터\n\n\n\n\n\n11.0.5 고민\n\n\n\n\n\n11.0.6 업그레이드"
  },
  {
    "objectID": "cs_nightingale.html#배경",
    "href": "cs_nightingale.html#배경",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.1 배경",
    "text": "7.1 배경\n크림 전쟁은 1853년부터 1856년까지 일어난 큰 전쟁이었다. 한쪽에는 러시아, 반면 다른 한쪽에는 영국, 프랑스, 오스만 제국 (현대 투르키에), 그리고 나중에 사르디니아 (현대 이탈리아의 일부)가 동맹을 구성하여 전쟁을 치뤘다. 전쟁이 바로 시작된 이유는 러시아가 오스만 제국 내 정교회 신자들을 보호하려 하려는 명분을 내세웠지만, 사실 더많은 영토를 차지하기 위함이였다. 양측간 전쟁은 흑해를 두고 남하하는 러시아에 맞서 동맹군이 크림반도에서 발생하여 “크림전쟁”(Crimean War)으로 불린다. 영화로 소개된 경기병대의 돌격 (“Charge of the Light Brigade”), 영국 간호사 플로렌스 나이팅게일의 활약, 전신과 철도의 본격적인 도입으로 큰 의미를 갖는 전쟁이기도 하다. 많은 전투와 많은 사람들이 죽은 후, 1856년 파리 조약으로 전쟁은 마무리되어, 러시아 확장은 잠시 멈추게 돼었고, 오스만 제국도 한숨 돌린 계기가 되었다.\n크림 전쟁 중 스쿠타리 막사는 투루키에 스쿠타리 병원(Scutari Hospital, Turkey)은 영국 군 병원으로 개조되었다. 크림전쟁에서 부상을 당한 수많은 병사가 치료를 위해 이곳으로 보내졌지만, 병자와 부상병들을 감당할 수 있도록 설계되지 않았고 제대로된 역할도 수행하지 못했다. 1854년 나이팅게일이 간호사 일행과 함께 도착했을 때, 비위생적인 환경과 고통받는 병사들을 보고 경악했다. 나이팅게일의 스쿠타리 병원에서 경험은 병원과 의료 서비스를 개선하여 이와 같은 고통과 비극이 재발하지 않도록 향후 프로젝트의 중요한 동기와 방향이 되었다.\n\n\n스쿠타리 병원의 한 병동 석판화 그림 (William Simpson)\n\n환자의 사망율을 42%에서 2%로 낮추고 집중치료실(ICU)을 설치하여 상태가 중한 환자를 격리하여 집중관리하는 등 근대적인 간호체계를 수립하는 데 기여하였다."
  },
  {
    "objectID": "cs_nightingale.html#원본-데이터",
    "href": "cs_nightingale.html#원본-데이터",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.2 원본 데이터",
    "text": "7.2 원본 데이터\n크림 전쟁 중 스쿠타리 막사는 투루키에 스쿠타리 병원에서 몇년간에 걸쳐 수작업으로 종이에 분석가능한 형태의 자료를 만들어내는 것은 결코 쉬운 작업이 아니다.\n\n\n원본 데이터"
  },
  {
    "objectID": "cs_nightingale.html#그래프-진화",
    "href": "cs_nightingale.html#그래프-진화",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.3 그래프 진화",
    "text": "7.3 그래프 진화\n출처: How Florence Nightingale Changed Data Visualization Forever - The celebrated nurse improved public health through her groundbreaking use of graphic storytelling\n복잡한 논거를 제시하는 대신 구체적인 주장에 데이터 시각화와 데이터 스토리텔링(Storytelling)을 통해 청중에 한걸음 더 다가섰다. 나이팅게일의 스토리텔링은 열악한 위생 상태와 과밀로 인해 불필요한 죽음이 얼마나 많이 발생하는지 이해하기 쉬운 비교를 통해 이야기를 구성해서 설득해 나갔다. 예를 들어, 군대 사망률을 민간인 사망률(유사한 환경의 맨체스터)과 비교하는 프레임을 제시하고, 군대 막사에서 생활하는 평시 병사들이 비슷한 연령대 민간인 남성보다 더 높은 비율로 사망하는 것을 제시했다. 이를 통해, 데이터가 보여주는 현실을 부정할 수 없게 만들었고, 군대 행정에 극적인 개혁을 이끌어냈다.\n\n\n\n\n(a) 막대그래프\n\n\n\n(b) 맨체스터 사망\n\n\n\n(c) 빅토리아 여왕 보고(I)\n\n\n\n(d) 빅토리아 여왕 보고(II)\n\n\n\n(e) 빅토리아 여왕 보고(III)\n\n\n그림 7.1: 나이팅게일 그래프 진화과정"
  },
  {
    "objectID": "cs_nightingale.html#설득",
    "href": "cs_nightingale.html#설득",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.4 설득",
    "text": "7.4 설득\n나이팅게일은 크림 전쟁 중 병원에서의 위생 문제와 관련된 데이터를 수집하고 분석하여 그 결과를 시각화했고, 병원에서의 사망 원인 중 대부분이 감염성 질병으로 인한 것을 발견했다. 이러한 감염성 질병은 부적절한 위생 조건과 밀접한 관련이 있음을 확인했다.\n나이팅게일은 병원의 위생 상태를 개선을 통해 수많은 생명을 구할 수 있다는 사실을 확인했고 연구결과와 권장 사항을 다양한 영국 정부부처에 제출했고, 특히 1858년에 영국의 장관들에게 보고서를 제출했다. 이를 통해서 군 병원의 위생 조건을 개선하는 데 큰 영향을 미쳤다.\n\n\n나이팅게일과 빅토리아 여왕"
  },
  {
    "objectID": "cs_nightingale.html#성과와-영향",
    "href": "cs_nightingale.html#성과와-영향",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.5 성과와 영향",
    "text": "7.5 성과와 영향\n나이팅게일 캠페인이 민간 공중보건에 미친 가장 큰 영향은 실현되기까지 오랜 기간에 걸쳐 다각도로 검토되었고, 마침내 1875년 영국 공중보건법(British Public Health Act)에 법제화되었다. 이 법에는 잘 정비된 하수도, 깨끗한 수돗물, 건축법 규제 등의 요건이 담겨있다. 질병에 대한 면역력을 강화하는 백신과 농작물 수확량을 획기적으로 늘리는 인공비료 개발과 함께 이 제도적인 노력으로 평균 수명을 두 배로 늘리는 원동력이 되었다."
  },
  {
    "objectID": "cs_nightingale.html#작업과정",
    "href": "cs_nightingale.html#작업과정",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.6 작업과정",
    "text": "7.6 작업과정\n\n7.6.1 디지털 데이터\nrladies/spain_nightingale GitHub 저장소에서 엑셀 형태로 된 데이터를 가져와서 전처리할 수 있다.\n\nlibrary(tidyverse)\nlibrary(readxl)\n\ndeath_raw &lt;- read_excel(\"data/datos_florence.xlsx\", sheet = \"Sheet1\", skip = 1)\n\ndeath_tbl &lt;- death_raw |&gt; \n  janitor::clean_names() |&gt; \n  set_names(c(\"Month\", \"Army\", \"Disease\", \"Wounds\", \"Other\", \"Disease.rate\", \"Wounds.rate\", \"Other.rate\")) |&gt; \n  mutate(Date = lubridate::my(Month)) |&gt; \n  separate(Month, into = c(\"Month\", \"Year\"), sep = \" |_\") |&gt; \n  select(Date, Month, Year, everything()) \n\ndeath_tbl\n\n# A tibble: 24 × 10\n   Date       Month Year   Army Disease Wounds Other Disease.rate Wounds.rate\n   &lt;date&gt;     &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1 1854-04-01 Apr   1854   8571       1      0     5          1.4         0  \n 2 1854-05-01 May   1854  23333      12      0     9          6.2         0  \n 3 1854-06-01 Jun   1854  28333      11      0     6          4.7         0  \n 4 1854-07-01 Jul   1854  28722     359      0    23        150           0  \n 5 1854-08-01 Aug   1854  30246     828      1    30        328.          0.4\n 6 1854-09-01 Sep   1854  30290     788     81    70        312.         32.1\n 7 1854-10-01 Oct   1854  30643     503    132   128        197          51.7\n 8 1854-11-01 Nov   1854  29736     844    287   106        341.        116. \n 9 1854-12-01 Dec   1854  32779    1725    114   131        632.         41.7\n10 1855-01-01 Jan   1855  32393    2761     83   324       1023.         30.7\n# ℹ 14 more rows\n# ℹ 1 more variable: Other.rate &lt;dbl&gt;\n\n\nHistDate 패키지에 동일한 데이터셋이 잘 정제되어 있어 이를 바로 활용해도 좋다.\n\nlibrary(HistData)\n\nHistData::Nightingale |&gt; \n  as_tibble()\n\n# A tibble: 24 × 10\n   Date       Month  Year  Army Disease Wounds Other Disease.rate Wounds.rate\n   &lt;date&gt;     &lt;ord&gt; &lt;int&gt; &lt;int&gt;   &lt;int&gt;  &lt;int&gt; &lt;int&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1 1854-04-01 Apr    1854  8571       1      0     5          1.4         0  \n 2 1854-05-01 May    1854 23333      12      0     9          6.2         0  \n 3 1854-06-01 Jun    1854 28333      11      0     6          4.7         0  \n 4 1854-07-01 Jul    1854 28722     359      0    23        150           0  \n 5 1854-08-01 Aug    1854 30246     828      1    30        328.          0.4\n 6 1854-09-01 Sep    1854 30290     788     81    70        312.         32.1\n 7 1854-10-01 Oct    1854 30643     503    132   128        197          51.7\n 8 1854-11-01 Nov    1854 29736     844    287   106        341.        116. \n 9 1854-12-01 Dec    1854 32779    1725    114   131        632.         41.7\n10 1855-01-01 Jan    1855 32393    2761     83   324       1023.         30.7\n# ℹ 14 more rows\n# ℹ 1 more variable: Other.rate &lt;dbl&gt;\n\n\n\n7.6.2 데이터와 사투\n앞서 준비한 death_tbl 데이터프레임에서 사망 관련 데이터를 처리하고 시각화하기 위한 전처리를 수행하여 시각화를 위한 준비작업을 수행한다. 먼저 Date, Disease.rate, Wounds.rate, Other.rate 칼럼을 선택하고, pivot_longer 함수를 사용해 시각화에 적합한 데이터로 재구조화한다. str_replace_all 함수를 사용하여 칼럼 이름에서 “.rate”를 제거하고, ifelse 함수를 이용해 날짜를 기준으로 나이팅게일 팀이 준비한 방식을 적용하기 전과후 “이전”과 “이후”로 체제로 구분한다. factor 함수를 사용하여 범주 순서를 정의하고, 마지막으로 month 함수를 이용해 날짜에서 해당 월을 추출하고 death_viz에 저장한다.\n\ndeath_viz &lt;- death_tbl %&gt;% \n  select(Date, Disease.rate, Wounds.rate, Other.rate) %&gt;% \n  pivot_longer(-Date, names_to = \"사망원인\", values_to = \"사망자수\") |&gt; \n  mutate(사망원인 = str_replace_all(사망원인, \"\\\\.rate\", \"\"), \n         체제 = ifelse(Date &lt;= as.Date(\"1855-03-01\"), \"조치이전\", \"조치이후\")) %&gt;% \n  mutate(체제 = factor(체제, levels = c(\"조치이전\", \"조치이후\"))) %&gt;%  \n  mutate(해당월 = month(Date, label = TRUE, abbr = TRUE)) |&gt; \n  mutate(사망원인 = case_when(사망원인 == \"Disease\" ~ \"질병\",\n                              사망원인 == \"Wounds\" ~ \"부상\",\n                              사망원인 == \"Other\" ~ \"기타\")) |&gt; \n  mutate(사망원인 = factor(사망원인, levels = c(\"질병\", \"부상\", \"기타\")))\n\ndeath_viz\n\n# A tibble: 72 × 5\n   Date       사망원인 사망자수 체제     해당월\n   &lt;date&gt;     &lt;fct&gt;       &lt;dbl&gt; &lt;fct&gt;    &lt;ord&gt; \n 1 1854-04-01 질병          1.4 조치이전 4     \n 2 1854-04-01 부상          0   조치이전 4     \n 3 1854-04-01 기타          7   조치이전 4     \n 4 1854-05-01 질병          6.2 조치이전 5     \n 5 1854-05-01 부상          0   조치이전 5     \n 6 1854-05-01 기타          4.6 조치이전 5     \n 7 1854-06-01 질병          4.7 조치이전 6     \n 8 1854-06-01 부상          0   조치이전 6     \n 9 1854-06-01 기타          2.5 조치이전 6     \n10 1854-07-01 질병        150   조치이전 7     \n# ℹ 62 more rows"
  },
  {
    "objectID": "cs_nightingale.html#시각화",
    "href": "cs_nightingale.html#시각화",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.7 시각화",
    "text": "7.7 시각화\n‘ggplot2’ 패키지를 이용하여 크림전쟁 나이팅게일 활약상을 담은 데이터를 시각화한다. 나이팅게일 활약 전과 후로 데이터(death_viz)를 나눠 “크림전쟁 병사 사망원인”에 대한 극좌표계 시각화를 통해 이해하기 쉬운 설득력있는 시각화 결과물을 제시하고 있다. 추가적으로, ‘showtext’ 패키지로 구글 “Noto Serif KR” 글꼴을 선택적용하고, ‘hrbrthemes’ 라이브러리를 이용하여 뒷 배경 검정색을 사용하여 붉은색 질병으로 인한 사망자수 확연한 감소를 시각적으로 강조한다.\n\nlibrary(hrbrthemes) \nlibrary(showtext)\nshowtext.auto()\nfont_add_google(name = \"Noto Serif KR\", family = \"noto_serif\")\nnoto_font &lt;- \"noto_serif\"\n\ndeath_gg &lt;- death_viz %&gt;% \n  ggplot(aes(x = 해당월, y = 사망자수, fill = 사망원인)) +\n  geom_col(color = \"grey20\") + \n  theme_modern_rc(base_family = noto_font, subtitle_family = noto_font) + \n  scale_fill_manual(values = c(\"firebrick\", \"orange\", \"#365181\"), name = \"\") +\n  scale_y_sqrt() +\n  facet_wrap(~ 체제) + \n  coord_equal(ratio = 1) +  \n  coord_polar() +\n  labs(title = \"크림전쟁 병사 사망원인\", \n       subtitle = \"데이터 시각화와 커뮤니케이션\", \n       caption = \"데이터 출처: 크림전쟁 사망자\") + \n  theme(legend.position = \"top\", \n        text = element_text(family = noto_font, size = 18),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        plot.margin = unit(rep(0.7, 4), \"cm\"),\n        plot.title = element_text(color = \"white\", family = noto_font, size = 25),\n        plot.caption = element_text(color = \"grey70\", family = noto_font, size = 12),\n        plot.subtitle = element_text(color = \"grey70\", size = 13),\n        legend.text = element_text(color = \"white\", size = 15),\n        strip.text = element_text(color = \"white\", size = 25, face = \"bold\", family = noto_font, hjust = 0.5))\n\ndeath_gg\n\n\n\n\n\n\n\n\n7.7.1 선그래프\n나이팅게일은 간호 분야의 선구자로 잘 알려져 있지만, 통계학자로서 “콕스콤(CoxComb)” 또는 “장미 다이어그램”(Rose Diagram)으로 알려진 원그래프를 제시하였지만 현재는 시간의 흐름에 따라 병사 사망자수 변화를 조치 전후로 명확히 하는 방법으로 선그래프가 기본 기법으로 자리잡고 있다.\n\nextrafont::loadfonts()\n\ndeath_new_gg &lt;- death_viz |&gt; \n  ggplot(aes(x = Date, y = 사망자수, color = 사망원인)) +\n    geom_line() +\n    geom_point() +\n    geom_vline(xintercept = as.Date(\"1855-03-15\"), linetype= 2) +\n    theme_ipsum_pub(base_family = noto_font, subtitle_family = noto_font) +\n    labs(title = \"크림전쟁 병사 사망원인\", \n         subtitle = \"데이터 시각화와 커뮤니케이션\", \n         caption = \"데이터 출처: 크림전쟁 사망자\",\n         x = \"월일\") + \n    scale_y_continuous(labels = scales::comma, limits = c(0, 1150)) +\n    theme(legend.position = \"top\", \n          text = element_text(family = noto_font, size = 18),\n          axis.ticks = element_blank(),\n          plot.margin = unit(rep(0.7, 4), \"cm\"),\n          plot.title = element_text(color = \"black\", family = noto_font, size = 35),\n          plot.caption = element_text(color = \"grey10\", family = noto_font, size = 17),\n          plot.subtitle = element_text(color = \"grey5\", size = 13),\n          legend.text = element_text(color = \"black\", size = 15)) +\n    geom_segment(x = as.Date(\"1854-03-01\"), y = 1100,\n                 xend = as.Date(\"1855-03-01\"), yend = 1100,\n                 color = \"gray70\",\n                 arrow = arrow(length = unit(0.1, \"inches\"))) +\n    geom_segment(x = as.Date(\"1855-04-01\"), y = 1100,\n                 xend = as.Date(\"1856-03-01\"), yend = 1100,\n                 color = \"gray15\",\n                 arrow = arrow(length = unit(0.1, \"inches\"))) +\n    annotate(\"text\", x = as.Date(\"1854-09-01\"), y = 1140, label = \"조치이전\",\n             size = 8.5, color = \"gray30\", family = noto_font) +\n    annotate(\"text\", x = as.Date(\"1855-09-01\"), y = 1140, label = \"조치이후\",\n             size = 8.5, color = \"gray15\", family = noto_font)          \n\ndeath_new_gg\n\n\n\n\n\n\n\n\n7.7.2 막대그래프\n동일한 정보를 막대그래프를 통해 시각화를 할 수도 있다. 원그래프와 비교하여 보면 명확하게 사망자수를 직관적으로 비교할 수 있다는 점에서 큰 장점이 있다.\n\ndeath_viz |&gt; \n  ggplot() +\n    geom_col(aes(x = Date, y = 사망자수, fill = 사망원인), colour=\"white\") +\n    geom_vline(xintercept = as.Date(\"1855-03-15\"), linetype= 2) +\n    scale_fill_manual(values = c(\"firebrick\", \"orange\", \"#365181\")) + \n    # theme_ipsum_pub(base_family = noto_font, subtitle_family = noto_font) +\n    labs(title = \"크림전쟁 병사 사망원인\", \n         subtitle = \"데이터 시각화와 커뮤니케이션\", \n         caption = \"데이터 출처: 크림전쟁 사망자\",\n         x = \"월일\") + \n    scale_y_continuous(labels = scales::comma, limits = c(0, 1150)) +\n    theme(legend.position = \"top\", \n          text = element_text(family = noto_font, size = 18),\n          axis.ticks = element_blank(),\n          plot.margin = unit(rep(0.7, 4), \"cm\"),\n          plot.title = element_text(color = \"black\", family = noto_font, size = 35),\n          plot.caption = element_text(color = \"grey10\", family = noto_font, size = 17),\n          plot.subtitle = element_text(color = \"grey5\", size = 13),\n          legend.text = element_text(color = \"black\", size = 15)) +\n    geom_segment(x = as.Date(\"1854-03-01\"), y = 1100,\n                 xend = as.Date(\"1855-03-01\"), yend = 1100,\n                 color = \"gray70\",\n                 arrow = arrow(length = unit(0.1, \"inches\"))) +\n    geom_segment(x = as.Date(\"1855-04-01\"), y = 1100,\n                 xend = as.Date(\"1856-03-01\"), yend = 1100,\n                 color = \"gray15\",\n                 arrow = arrow(length = unit(0.1, \"inches\"))) +\n    annotate(\"text\", x = as.Date(\"1854-09-01\"), y = 1140, label = \"조치이전\",\n             size = 8.5, color = \"gray30\", family = noto_font) +\n    annotate(\"text\", x = as.Date(\"1855-09-01\"), y = 1140, label = \"조치이후\",\n             size = 8.5, color = \"gray15\", family = noto_font)"
  },
  {
    "objectID": "cs_nightingale.html#표-문법",
    "href": "cs_nightingale.html#표-문법",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.8 표 문법",
    "text": "7.8 표 문법\n데이터 문법, 그래프 문법에 이어 최근 “표 문법”이 새롭게 자리를 잡아가고 있다. 표 문법에 맞춰 나이팅게일 크림전쟁 사망자수를 조치 이전과 조치 이후로 나눠 요약하면 확연한 차이를 파악할 수 있다.\ngt와 gtExtras 패키지를 활용하여 death_viz 데이터프레임을 사망 원인별 사망자 수를 “조치 이전”과 “조치 이후”로 구분하여 표를 두개 생성한다. 각 표은 날짜, 질병, 부상, 기타 범주로 사망자 수와 그 합계를 표시하며, 총 사망자수가 250명을 초과하는 행에 대한 강조 색상을 입히고 나서 두 표를 나란히 배치하여 조치 전후 효과를 시각적으로 비교한다.\n\nlibrary(gt)\nlibrary(gtExtras)\n\nbefore_tbl &lt;- death_viz |&gt; \n  filter(체제 == \"조치이전\")\n\nafter_tbl &lt;- death_viz |&gt; \n  filter(체제 == \"조치이후\")\n\nbefore_gt &lt;- before_tbl |&gt; \n  pivot_wider(names_from = 사망원인, values_from = 사망자수) |&gt; \n  select(날짜 = Date, 질병, 부상, 기타) |&gt; \n  mutate(합계 = 질병 + 부상 + 기타) |&gt; \n  gt() |&gt; \n    gt_theme_538() |&gt; \n    cols_align(\"center\") |&gt; \n    fmt_integer( columns = 질병:합계) |&gt; \n    tab_spanner(label = \"조치 이전\", columns = c(질병, 부상, 기타)) |&gt; \n    data_color(\n      columns = c(질병, 부상, 기타, 합계),\n      rows = 합계 &gt; 250,      \n      method = \"numeric\",\n      palette = \"ggsci::red_material\")\n\nafter_gt &lt;- after_tbl |&gt; \n  pivot_wider(names_from = 사망원인, values_from = 사망자수) |&gt; \n  select(날짜 = Date, 질병, 부상, 기타) |&gt; \n  mutate(합계 = 질병 + 부상 + 기타) |&gt; \n  gt() |&gt; \n    gt_theme_538() |&gt; \n    cols_align(\"center\") |&gt; \n    fmt_integer( columns = 질병:합계) |&gt; \n  tab_spanner(label = \"조치 이후\", columns = c(질병, 부상, 기타)) |&gt; \n  data_color(\n    columns = c(질병, 부상, 기타, 합계),\n    rows = 합계 &gt; 250,      \n    method = \"numeric\",\n    palette = \"ggsci::red_material\")\n\ngtExtras::gt_two_column_layout(list(before_gt, after_gt))\n\n\n\n\n\n\n\n\n날짜\n      \n        조치 이전\n      \n      합계\n    \n\n질병\n      부상\n      기타\n    \n\n\n\n1854-04-01\n1\n0\n7\n8\n\n\n1854-05-01\n6\n0\n5\n11\n\n\n1854-06-01\n5\n0\n2\n7\n\n\n1854-07-01\n150\n0\n10\n160\n\n\n1854-08-01\n328\n0\n12\n341\n\n\n1854-09-01\n312\n32\n28\n372\n\n\n1854-10-01\n197\n52\n50\n299\n\n\n1854-11-01\n341\n116\n43\n499\n\n\n1854-12-01\n632\n42\n48\n721\n\n\n1855-01-01\n1,023\n31\n120\n1,174\n\n\n1855-02-01\n823\n16\n140\n979\n\n\n1855-03-01\n480\n13\n69\n562\n\n\n\n\n\n\n\n\n\n\n\n날짜\n      \n        조치 이후\n      \n      합계\n    \n\n질병\n      부상\n      기타\n    \n\n\n\n1855-04-01\n178\n18\n21\n217\n\n\n1855-05-01\n172\n17\n12\n201\n\n\n1855-06-01\n248\n64\n10\n322\n\n\n1855-07-01\n108\n38\n9\n154\n\n\n1855-08-01\n130\n44\n7\n181\n\n\n1855-09-01\n48\n69\n5\n122\n\n\n1855-10-01\n33\n14\n5\n51\n\n\n1855-11-01\n56\n10\n10\n77\n\n\n1855-12-01\n25\n5\n8\n38\n\n\n1856-01-01\n11\n0\n13\n25\n\n\n1856-02-01\n7\n0\n5\n12\n\n\n1856-03-01\n4\n0\n9\n13"
  },
  {
    "objectID": "cs_nightingale.html#커뮤니케이션",
    "href": "cs_nightingale.html#커뮤니케이션",
    "title": "\n7  나이팅게일\n",
    "section": "\n7.9 커뮤니케이션",
    "text": "7.9 커뮤니케이션\n데이터를 기반으로 뭔가 유용한 것을 창출한 후에 이를 알리기 위해 커뮤니케이션 단계를 거치게 된다. 가장 흔히 사용하는 방식은 엑셀, 워드, 파워포인트와 같은 MS 오피스 제품을 활용하는 방식이다. 과거 SAS, SPSS, 미니탭 등 외산 통계 팩키지로 데이터를 분석하고 유용한 모형 등을 찾아낸 후에 이를 커뮤니케이션하기 위해 MS 오피스 제품을 통해 커뮤니케이션을 하기도 했다. 하지만, 각각은 별개의 시스템으로 분리되어 있어 일일이 사람손이 가는 번거러움이 많았다. 이를 해결하기 하는 방법은 하나의 도구 혹은 언어로 모든 작업을 처리하는 것이다. [^meghan]\n[^meghan] : Meghan Hall (June 15, 2021), “Extending R Markdown”, RStudio: R in Sports Analytics,\n우선 엑셀은 tidyverse 로 대체가 되고, 워드는 R 마크다운을 거쳐 쿼토(Quarto), 파워포인트도 R 마크다운(xaringan 등)에서 진화한 reveal.js 기반 쿼토 슬라이드가 빠르게 자리를 잡아가고 있다.\n\n\n오피스 기반 커뮤니케이션 현재 상태점검\n\n데이터 과학을 커뮤니케이션하는 방식은 다양한 방식이 존재하지만 직장상사 뿐만 아니라 집단지성을 넘어 AI를 적극 도입하여 데이터 분석 역량을 고도화하는데 동료 개발자 및 협업하시는 분들과 커뮤니케이션 뿐만 아니라 불특정 다수를 대상으로 한 인터넷에 공개와 공유를 통해 새로운 관계를 맺어가는 것도 그 중요성을 더해가고 있다.\n\n동료 개발자나 협업하시는 분: .qmd 파일\n직장상사\n\nPDF 파일: quarto, pandoc\n\n파워포인트 슬라이스덱: reveal.js 기반 quarto\n\n대쉬보드: flexdashboard\n\n\n\n일반 공개\n\n웹사이트: distill을 지나 quarto\n\n블로그: blogdown을 지나 quarto\n\n책: bookdown을 지나 quarto"
  },
  {
    "objectID": "cs_napolean.html#미나르-지도",
    "href": "cs_napolean.html#미나르-지도",
    "title": "\n8  나폴레옹 러시아 침공\n",
    "section": "\n8.1 미나르 지도",
    "text": "8.1 미나르 지도\n찰스 조셉 미나르(Charles Joseph Minard)가 제작한 1869년 지도는 나폴레옹의 1812년 러시아 원정을 시각적으로 표현한 것으로, 다양한 데이터 시각화의 원칙과 기술을 혁신적으로 보여주는 명작으로 평가받고 있다. 나폴레옹 군대가 러시아로 진군하고 다시 귀환하는 과정에서 병력이 얼마나 줄어들었는지를 선의 두께로 표시했을 뿐만 아니라, 지도에는 군대 이동 경로, 위치, 날짜, 온도 등 다양한 정보가 함께 표시되어, 단순한 지리적 정보를 넘어서 시간과 조건에 따른 변화까지 한 눈에 파악할 수 있다.\n미나르의 지도는 데이터 시각화의 중요성과 효과를 입증하는 고전으로 여겨진다. 복잡하고 다양한 데이터를 단순하면서도 명확하게 표현함으로써, 복잡한 사건과 현상을 이해하기 쉽게 제작했다. 나폴레옹 군대의 군사적 실패 뿐만 아니라, 병참, 전략, 날씨가 군사 작전에 미치는 영향을 진군과 후퇴를 색상을 달리하여 표현하는 등 시각화를 통해 잘 보여주고 있다.\n\n\n나폴레옹 러시아 원정 미나르 지도\n\n저자를 포함한 많은 분들이 프랑스 파리에서 출발하여 러시아 원정이 시작되었다고 잘못알고 있으나, 1812년 러시아 원정 시작지는 니멘 강(Neman River)을 건너는 지점으로 니멘 강은 당시 러시아와 프랑스 연합국인 프러시아(당시 동유럽에 위치) 사이에서 경계를 형성하고 있었다. 1812년 6월 24일, 나폴레옹의 대군이 이 강을 건너면서 러시아 침공을 시작됐다.\n\n\n미나르 지도를 현재 지도와 매핑"
  },
  {
    "objectID": "cs_napolean.html#데이터",
    "href": "cs_napolean.html#데이터",
    "title": "\n8  나폴레옹 러시아 침공\n",
    "section": "\n8.2 데이터",
    "text": "8.2 데이터\n\n8.2.1 생존병사 수\nHistData 패키지에 나폴레옹 러시아 원정 데이터셋이 포함되어 있다. 원데이터셋은 minard.txt 파일에서 바로 얻을 수 있다.\nHistData, tidyverse, gt, gtExtras 패키지를 활용하여 나폴레옹 러시아 원정 데이터를 표형태로 출력한다.\n먼저 필요한 패키지를 불러온 다음, 병사 이동 경로(Minard.troops), 도시 정보(Minard.cities), 기온 데이터(Minard.temp)를 적재하고, filter() 함수를 사용하여 진격과 후퇴 상황에 따라 데이터를 나눠 attack_tbl과 retreat_tbl에 저장한다.\ngt() 함수로 데이터프레임을 표로 변화시키는데, gt_theme_hangul() 함수는 한글 테마를 적용하고, fmt_integer()는 정수 형태로 천단위 넘는 숫자 가독성을 높이고, cols_align() 함수로 칼럼을 가운데 정렬하고, cols_label()로 칼럼 라벨을 영어에서 한글로 변환한다. tab_header() 함수로 진격과 후퇴 제목을 설정하여 attack_gt와 retreat_gt에 각각 저장한다. 마지막으로 gtExtras::gt_two_column_layout() 함수를 사용하여 두 표를 병합하여 마무리한다.\n\nlibrary(HistData)\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n\ndata(Minard.troops) \ndata(Minard.cities)\ndata(Minard.temp)\n\nattack_tbl &lt;- Minard.troops |&gt; \n  filter(direction == \"A\")\n\nretreat_tbl &lt;- Minard.troops |&gt; \n  filter(direction == \"R\")\n\nattack_gt &lt;- attack_tbl |&gt; \n  gt() |&gt; \n    gt_theme_hangul() |&gt; \n    fmt_integer(columns = survivors) |&gt; \n    cols_align(\"center\") |&gt; \n    cols_label(\n      long = \"경도\",\n      lat = \"위도\",\n      survivors =  \"생존병사수\",\n      direction = \"진격방향\"\n    ) |&gt; \n    tab_header(title = \"진격경로\")\n\nretreat_gt &lt;- retreat_tbl |&gt; \n  gt() |&gt; \n    gt_theme_hangul() |&gt; \n    fmt_integer(columns = survivors) |&gt; \n    cols_align(\"center\") |&gt; \n    cols_label(\n      long = \"경도\",\n      lat = \"위도\",\n      survivors =  \"생존병사수\",\n      direction = \"진격방향\"\n    )  |&gt; \n    tab_header(title = \"후퇴\")\n\ngtExtras::gt_two_column_layout(list(attack_gt, retreat_gt))\n\n\n\n\n\n\n\n\n진격경로\n    \n\n경도\n      위도\n      생존병사수\n      진격방향\n      group\n    \n\n\n\n24.0\n54.9\n340,000\nA\n1\n\n\n24.5\n55.0\n340,000\nA\n1\n\n\n25.5\n54.5\n340,000\nA\n1\n\n\n26.0\n54.7\n320,000\nA\n1\n\n\n27.0\n54.8\n300,000\nA\n1\n\n\n28.0\n54.9\n280,000\nA\n1\n\n\n28.5\n55.0\n240,000\nA\n1\n\n\n29.0\n55.1\n210,000\nA\n1\n\n\n30.0\n55.2\n180,000\nA\n1\n\n\n30.3\n55.3\n175,000\nA\n1\n\n\n32.0\n54.8\n145,000\nA\n1\n\n\n33.2\n54.9\n140,000\nA\n1\n\n\n34.4\n55.5\n127,100\nA\n1\n\n\n35.5\n55.4\n100,000\nA\n1\n\n\n36.0\n55.5\n100,000\nA\n1\n\n\n37.6\n55.8\n100,000\nA\n1\n\n\n24.0\n55.1\n60,000\nA\n2\n\n\n24.5\n55.2\n60,000\nA\n2\n\n\n25.5\n54.7\n60,000\nA\n2\n\n\n26.6\n55.7\n40,000\nA\n2\n\n\n27.4\n55.6\n33,000\nA\n2\n\n\n28.7\n55.5\n33,000\nA\n2\n\n\n24.0\n55.2\n22,000\nA\n3\n\n\n24.5\n55.3\n22,000\nA\n3\n\n\n24.6\n55.8\n6,000\nA\n3\n\n\n\n\n\n\n\n\n\n\n\n후퇴\n    \n\n경도\n      위도\n      생존병사수\n      진격방향\n      group\n    \n\n\n\n37.7\n55.7\n100,000\nR\n1\n\n\n37.5\n55.7\n98,000\nR\n1\n\n\n37.0\n55.0\n97,000\nR\n1\n\n\n36.8\n55.0\n96,000\nR\n1\n\n\n35.4\n55.3\n87,000\nR\n1\n\n\n34.3\n55.2\n55,000\nR\n1\n\n\n33.3\n54.8\n37,000\nR\n1\n\n\n32.0\n54.6\n24,000\nR\n1\n\n\n30.4\n54.4\n20,000\nR\n1\n\n\n29.2\n54.3\n20,000\nR\n1\n\n\n28.5\n54.2\n20,000\nR\n1\n\n\n28.3\n54.3\n20,000\nR\n1\n\n\n27.5\n54.5\n20,000\nR\n1\n\n\n26.8\n54.3\n12,000\nR\n1\n\n\n26.4\n54.4\n14,000\nR\n1\n\n\n25.0\n54.4\n8,000\nR\n1\n\n\n24.4\n54.4\n4,000\nR\n1\n\n\n24.2\n54.4\n4,000\nR\n1\n\n\n24.1\n54.4\n4,000\nR\n1\n\n\n28.7\n55.5\n33,000\nR\n2\n\n\n29.2\n54.2\n30,000\nR\n2\n\n\n28.5\n54.1\n30,000\nR\n2\n\n\n28.3\n54.2\n28,000\nR\n2\n\n\n24.6\n55.8\n6,000\nR\n3\n\n\n24.2\n54.4\n6,000\nR\n3\n\n\n24.1\n54.4\n6,000\nR\n3\n\n\n\n\n\n\n\n\n\n8.2.2 후퇴 기온\nMinard.temp 데이터셋을 사용하여 후퇴 시점의 온도 정보를 표로 제작한다. 먼저 mutate() 함수를 통해 date 칼럼 값을 문자열로 변환하고, “1812” 연도를 추가해 날짜 정보를 완성한다. mdy() 함수를 사용해 날짜 문자열을 Date 자료형으로 변환하는데, quiet = TRUE 옵션을 설정해 경고 메시지를 표시하지 않게 한다.\n이후에는 gt() 함수를 사용해 데이터 프레임을 테이블로 변환하게 된다. gt_theme_hangul()을 통해 테이블에 한국어 테마를 적용하고, cols_align(\"center\")로 모든 칼럼을 가운데 정렬한다. cols_label() 함수를 통해 각 칼럼에 적절한 한국어 레이블을 지정한다. 만약\ngt() 함수로 데이터프레임을 표로 변화시키는데, gt_theme_hangul() 함수는 한글 테마를 적용하고, fmt_integer()는 정수 형태로 천단위 넘는 숫자 가독성을 높이고, cols_align() 함수로 칼럼을 가운데 정렬하고, cols_label()로 칼럼 라벨을 영어에서 한글로 변환한다. 관측날짜 칼럼에 누락된 값이 있으면, fmt_missing(missing_text = \"-\")를 사용하여 누락된 값을 “-”로 표시한다.\nfmt_date() 함수를 사용하여 date 칼럼의 날짜 형식을 date_style = \"yMMMd\"와 locale = \"ko\"를 설정하여 연도, 월, 일을 대한민국 기준에 맞춘다.\n\nMinard.temp |&gt; \n  mutate(date = as.character(date), # date를 문자열로 변환\n         date = str_glue(\"{date}/1812\")) |&gt; \n  mutate(date = mdy(date, quiet = TRUE)) |&gt;  # quiet = TRUE로 경고 메시지 방지\n\n  gt() |&gt; \n    gt_theme_hangul() |&gt; \n    # fmt_integer(columns = survivors) |&gt; \n    cols_align(\"center\") |&gt; \n    cols_label(  \n      long = \"위도\",\n      temp = \"기온\",\n      days = \"후퇴날짜\",\n      date = \"관측날짜\") |&gt; \n    tab_header(title = \"후퇴 온도\") |&gt; \n    gt::fmt_missing(missing_text = \"-\") |&gt; \n    fmt_date(\n      columns = date,\n      date_style  = \"yMMMd\",\n      locale = \"ko\"\n    )\n\n\n\n\n\n\n후퇴 온도\n    \n\n위도\n      기온\n      후퇴날짜\n      관측날짜\n    \n\n\n\n37.6\n0\n6\n1812년 10월 18일\n\n\n36.0\n0\n6\n1812년 10월 24일\n\n\n33.2\n-9\n16\n1812년 11월 9일\n\n\n32.0\n-21\n5\n1812년 11월 14일\n\n\n29.2\n-11\n10\n-\n\n\n28.5\n-20\n4\n1812년 11월 28일\n\n\n27.2\n-24\n3\n1812년 12월 1일\n\n\n26.7\n-30\n5\n1812년 12월 6일\n\n\n25.3\n-26\n1\n1812년 12월 7일"
  },
  {
    "objectID": "cs_napolean.html#시각화",
    "href": "cs_napolean.html#시각화",
    "title": "\n8  나폴레옹 러시아 침공\n",
    "section": "\n8.3 시각화",
    "text": "8.3 시각화\n나폴레옹의 러시아 침공을 앞선 데이터셋을 바탕으로 시각화한다. HistData 패키지에서 제공하는 Minard 데이터셋을 이용하여 병력의 이동 경로와 생존 병사 수를 그리고(plot_troops), 주요 도시의 위치를 표시한다(plot_cities). 두 그래프를 합쳐 하나의 그래프(plot_minard)로 만들고, 그 위에 온도 변화(plot_temp)까지 표시한다. 마지막으로 grid.arrange 함수를 사용해 두 그래프를 하나로 합치고, 이를 이미지 파일로 저장한다.\n병력 이동, 생존자 수, 도시 위치, 그리고 온도 변화, 진격과 후퇴 색상을 달리하여 나폴레옹 러시아 침공에 대한 전반적인 사항을 한눈에 볼 수 있는 시각화 그래프를 제작했다.\n\nlibrary(HistData)\nlibrary(ggrepel)\nrequire(scales)\nrequire(gridExtra)\n\ndata(Minard.troops)\ndata(Minard.cities)\ndata(Minard.temp)\n\nlevels(Minard.cities$city) &lt;- c(\"Bobr\", \"Chjat\", \"Dorogobouge\", \"Gloubokoe\", \"Kowno\", \"Malo-Jarosewii\", \n                                \"Minsk\", \"Mohilow\", \"Moiodexno\", \"Mojaisk\", \"모스코바\", \"Orscha\", \n                                \"Polotzk\", \"Smolensk\", \"Smorgoni\", \"Studienska\", \"Tarantino\", \n                                \"Wilna\", \"Witebsk\", \"Wixma\")\n\n# 병력 이동 경로와 도시 이름을 레이어에 올린다.\nplot_troops &lt;- ggplot(Minard.troops, aes(long, lat)) +\n    geom_path(aes(size = survivors, colour = direction, group = group),\n               lineend = \"round\", linejoin = \"round\")\nplot_cities &lt;- geom_text(aes(label = city), size = 4, data = Minard.cities)\n \n# 눈금 정보, 라벨을 추가\n# 온도를 맞추도록 경도에 대한 x축 명시적 설정.\n\nbreaks &lt;- c(1, 2, 3) * 10^5 \n\nplot_minard &lt;- plot_troops + plot_cities +\n    scale_size(\"생존병사수\", range = c(1, 10), \n                breaks = breaks, labels = scales::comma(breaks)) +\n  scale_color_manual(\"진격방향\", \n                     values = c(\"grey50\", \"red\"), \n                     labels=c(\"진격\", \"후퇴\")) +\n  coord_cartesian(xlim = c(24, 38)) +\n  labs(x = NULL,\n       y = \"경도\",\n       title = \"나폴레옹 러시아 침공\",\n       subtitle = \"1812년 6월 24일 ~ 1813년 1월 5일\") +\n  theme_korean() +\n  theme(legend.position=c(.8, .2), legend.box=\"horizontal\")\n \nplot_temp &lt;- Minard.temp %&gt;% \n  mutate(date = case_when(str_detect(date, \"Oct\") ~ str_replace(date, \"Oct\", \"10월\"),\n                          str_detect(date, \"Nov\") ~ str_replace(date, \"Nov\", \"11월\"),\n                          str_detect(date, \"Dec\") ~ str_replace(date, \"Dec\", \"12월\"),\n                           TRUE ~ \"미상\")) %&gt;% \n  mutate(date = glue::glue(\"{date}일\")) %&gt;% \n  mutate(date = ifelse(date == \"미상일\", \"미상\", date)) %&gt;% \n  ggplot(aes(long, temp)) +\n    geom_path(color=\"grey\", size=1.5) +\n    geom_point(size=2) +\n    geom_text_repel(aes(label=glue::glue(\"{date}\")) ) +\n    xlab(\"위도\") + ylab(\"기온\") +\n    coord_cartesian(xlim = c(24, 38)) + \n    theme_korean()\n    \n# 그래프 결합\nminard_g &lt;- grid.arrange(plot_minard, plot_temp, nrow=2, heights=c(3,1))\n\nggsave( glue::glue(\"images/나폴레옹_러시아.png\") , \n        minard_g,\n        device = ragg::agg_png, \n        width = 297, height = 210, units = \"mm\", res = 600)"
  },
  {
    "objectID": "cs_bomber.html#세계대전",
    "href": "cs_bomber.html#세계대전",
    "title": "\n12  폭격비행기\n",
    "section": "\n12.1 세계대전",
    "text": "12.1 세계대전\n\n12.1.1 유럽전선\n\n\n\n\n\n12.1.2 태평양 전선"
  },
  {
    "objectID": "cs_bomber.html#대공포",
    "href": "cs_bomber.html#대공포",
    "title": "\n12  폭격비행기\n",
    "section": "\n12.2 대공포",
    "text": "12.2 대공포"
  },
  {
    "objectID": "cs_bomber.html#폭격기-데이터",
    "href": "cs_bomber.html#폭격기-데이터",
    "title": "\n12  폭격비행기\n",
    "section": "\n12.3 폭격기 데이터",
    "text": "12.3 폭격기 데이터\n생존자 편향(Survivorship Bias)의 오류는 실패한 사례나 숨겨진 요인을 고려하지 않고 오직 ‘생존’ 혹은 ‘성공’ 사례만을 분석하여 일반화하는 과정에서 발생하여 데이터나 결과 해석을 왜곡시킬 수 있다.\n아브라함 왈드(Abraham Wald)는 제2차 세계대전 동안 컬럼비아 대학 통계연구그룹(Statistical Research Group)에서 일했다. 전투기와 같은 군사 장비가 적으로부터 얼마나 많은 피해를 입을 수 있는지에 대한 분석을 수행했으며, 특히 ‘생존자 편향(Survivorship Bias)’ 문제를 고려한 통계적 방법을 제안하여 중요한 기여를 했다.\n전투기가 전투에서 돌아올 때 어떤 부분이 가장 많이 손상되는지에 대한 데이터가 있었다. 대부분의 사람들은 데이터를 보고 손상이 가장 많이 발생한 부분을 강화해야 한다고 생각했지만, 왈드는 이와는 반대의 접근을 택했는데, 돌아오지 못한 전투기에 대한 데이터가 누락되어 있으므로, 이를 고려하지 않으면 편향된 결론을 내릴 수 있다고 지적했다. 즉, 손상이 적게 발생한 부분이 전투기 귀환에 오히려 더 중요할 수 있다는 것이다.\n\n\n귀환한 폭격기 피탄 위치\n\n전폭기를 크게 4가지 부분으로 나눠 데이터를 임의로 생성해보자.\n\nWing_Hits : 전폭기 날개\nFuselage_Hits : 전폭기 주 몸체\nEngine_Hits : 전폭기 엔진\nCockpit_Hits : 전폭기 조종석\n\n\n# tidyverse 패키지 불러오기\nlibrary(tidyverse)\n\n# 난수 생성을 위한 seed 설정\nset.seed(123)\n\n# 100대의 전투기 데이터 생성\nn_planes &lt;- 100\n\n# 데이터프레임 생성\nplane_raw &lt;- tibble(\n  Plane_ID = 1:n_planes,\n  Wing_Hits = sample(0:20, n_planes, replace = TRUE),\n  Fuselage_Hits = sample(0:10, n_planes, replace = TRUE),\n  Engine_Hits = sample(0:5, n_planes, replace = TRUE),\n  Cockpit_Hits = sample(0:2, n_planes, replace = TRUE)\n) \n  \nplane_tbl &lt;- plane_raw |&gt; \n  pivot_longer(-Plane_ID, names_to = \"피탄부위\", values_to = \"피탄수\") |&gt; \n  mutate(부위 = case_match(피탄부위,\n                         \"Wing_Hits\"     ~ \"날개\",\n                         \"Fuselage_Hits\" ~ \"주 몸체\",\n                         \"Engine_Hits\"   ~ \"엔진\",\n                         \"Cockpit_Hits\"  ~ \"조종석\"))\n\n# 각 부위별 총 타격 수 계산\nsummary_tbl &lt;- plane_tbl %&gt;% \n  group_by(피탄부위, 부위) |&gt; \n  summarise(총피탄수 = sum(피탄수)) |&gt; \n  arrange(desc(총피탄수))\n\nsummary_tbl\n\n# A tibble: 4 × 3\n# Groups:   피탄부위 [4]\n  피탄부위      부위    총피탄수\n  &lt;chr&gt;         &lt;chr&gt;      &lt;int&gt;\n1 Wing_Hits     날개        1066\n2 Fuselage_Hits 주 몸체      597\n3 Engine_Hits   엔진         226\n4 Cockpit_Hits  조종석       105\n\n# 계산 결과 확인\n\nsummary_tbl |&gt; \n  ggplot(aes(x = fct_reorder(부위, 총피탄수), y = 총피탄수)) +\n    geom_col(width = 0.3) +\n    coord_flip() +\n    labs(x=\"\",\n         title = \"제2차 세계대전 폭격기 부위별 피탄수\") +\n    theme_korean() +\n    scale_y_continuous(labels = scales::comma)"
  },
  {
    "objectID": "cs_bomber.html#보강",
    "href": "cs_bomber.html#보강",
    "title": "\n12  폭격비행기\n",
    "section": "\n12.4 보강",
    "text": "12.4 보강\n날개(Wing) 부분이 가장 많이 타격을 받아 이 부분과 그 다음 주 몸체를 보강해야 된다고 볼 수도 있다. 이는 생존한 전투기만 고려한 전형적인 생존자 편향으로 실제로 엔진과 조종석을 보강해야 더 큰 효과를 볼 수 있다.\n\n\n폭격기 보강 전략"
  }
]